var searchIndex = JSON.parse('{\
"bounce_classify":{"doc":"","t":"NNNNNEDDDNNNNNNNNNNENNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AuthenticationFailed","AutoReply","BadConfiguration","BadConnection","BadDomain","BounceClass","BounceClassifier","BounceClassifierBuilder","BounceClassifierFile","ChallengeResponse","ContentRelated","DNSFailure","InactiveMailbox","InvalidRecipient","InvalidSender","MessageExpired","NoAnswerFromHost","PolicyRelated","PreDefined","PreDefinedBounceClass","ProhibitedAttachment","ProtocolErrors","QuotaIssues","RelayDenied","RelayingIssues","RoutingErrors","SpamBlock","SpamContent","SpamRelated","Subscribe","TransientFailure","Uncategorized","Unsubscribe","UserDefined","VirusRelated","add_rule","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","classify_response","classify_str","clone","clone","clone_into","clone_into","cmp","cmp","compare","compare","default","default","deserialize","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","hash","hash","into","into","into","into","into","into","merge","merge_json_file","merge_toml_file","new","partial_cmp","partial_cmp","rules","serialize","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"bounce_classify"]],"d":["authentication policy was not met","The message is an auto-reply/vacation mail.","messages rejected due to configuration issues with remote …","messages bounced due to bad connection issues with remote …","messages bounced due to invalid or non-existing domains, …","","","Holds state for compiling rules files into a classifier","Defines the content of bounce classifier rules files","The message is a challenge-response probe.","messages refused or blocked due to content related …","The message bounced due to a DNS failure.","messages rejected due to expired, inactive, or disabled …","The recipient is invalid","messages bounced due to invalid DNS or MX entry for …","messages bounced due to not being delivered before the …","messages bounces due to receiving no response from remote …","messages refused or blocked due to general policy reasons, …","","","The message was blocked by the receiver because it …","messages rejected due to SMTP protocol syntax or sequence …","messages rejected or blocked due to mailbox quota issues, …","The message was blocked by the receiver because relaying …","messages refused or blocked due to remote mail server …","messages bounced due to mail routing issues for recipient …","The message was blocked by the receiver as coming from a …","The message was blocked by the receiver as spam","messages refused or blocked due to spam related reasons, …","The message is a subscribe request.","Message transmission has been temporarily delayed.","messages rejected due to other reasons, 4.X.X or 5.X.X …","The message is an unsubscribe request.","","messages refused or blocked due to virus related reasons, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[8,8,8,8,8,0,0,0,0,8,8,8,8,8,8,8,8,8,2,0,8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,1,4,2,8,11,1,4,2,8,11,1,1,4,4,2,8,2,8,2,8,2,8,2,1,2,8,11,2,8,2,2,2,8,8,8,2,8,8,11,4,2,2,2,8,11,1,8,2,8,4,2,2,8,11,1,1,1,1,1,2,8,11,2,8,11,2,8,8,4,2,8,8,11,1,4,2,8,11,1,4,2,8,11,1,4,2,8,11,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[5,[4,3]]]],[[4,6],2],[[4,7],2],[2,2],[8,8],[[]],[[]],[[2,2],9],[[8,8],9],[[],9],[[],9],[[],2],[[],1],[10,[[5,[2]]]],[10,[[5,[8]]]],[10,[[5,[11]]]],[[2,2],12],[[8,8],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[2,13],14],[[8,13],14],[[8,13],[[5,[15]]]],[[11,13],14],[[]],[3,2],[8,2],[[]],[[]],[[]],[[]],[7,[[5,[8]]]],[[2,16]],[[8,16]],[[]],[[]],[2,3],[[]],[[]],[[]],[[1,11]],[[1,7],[[5,[3]]]],[[1,7],[[5,[3]]]],[[],1],[[2,2],[[17,[9]]]],[[8,8],[[17,[9]]]],0,[[2,18],5],[[8,18],5],[[11,18],5],[[]],[[]],[[],3],[[],5],[[],5],[[],5],[7,[[5,[8]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"BounceClassifierBuilder"],[4,"BounceClass"],[3,"String"],[3,"BounceClassifier"],[4,"Result"],[3,"Response"],[15,"str"],[4,"PreDefinedBounceClass"],[4,"Ordering"],[8,"Deserializer"],[3,"BounceClassifierFile"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"Hasher"],[4,"Option"],[8,"Serializer"],[3,"TypeId"]]},\
"cidr_map":{"doc":"","t":"NNNEEEDDDNEEDDNENNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["Any","Any","Any","AnyIpCidr","AnyIpCidr","AnyIpCidr","CidrMap","CidrSet","InnerNode","InnerNode","IpCidr","IpCidr","Iter","Leaf","Leaf","Node","V4","V4","V4","V4","V4","V6","V6","V6","V6","V6","add_methods","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clip","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains","contains","contains","contains","contains","default","default","deserialize","deserialize","deserialize","eq","eq","equivalent","equivalent","erased_serialize","erased_serialize","erased_serialize","family","family","family","first","first","first","first_address","first_address","first_address","flip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_lua","from_lua_multi","from_str","from_str","get","get_hash","get_hash","get_prefix_match","get_prefix_match_cidr","hash","hash","insert","insert","insert_uncompressed","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_any","is_host_address","is_host_address","is_host_address","is_ipv4","is_ipv4","is_ipv6","is_ipv6","iter","iter","iter","key","key","key","last","last","last","last_address","last_address","last_address","left","len","mask","mask","mask","network_length","network_length","network_length","new","new","new","new","new","new","new_host","new_host","new_host","next","null","partial_cmp","partial_cmp","pick_side","pick_side_mut","register","right","root","serialize","serialize","serialize","set","shared_prefix_len","to_lua","to_lua_multi","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value"],"q":[[0,"cidr_map"]],"d":["“any” network containing all IPv4 and IPv6 addresses","“any” network containing all IPv4 and IPv6 addresses","“any” network containing all IPv4 and IPv6 addresses","Represents either an IPv4 or an IPv6 network or “any”.","Represents either an IPv4 or an IPv6 network or “any”.","Represents either an IPv4 or an IPv6 network or “any”.","","","Inner node with two direct children.","Inner node","<code>Cidr</code> type representing either an IPv4 or an IPv6 network","<code>Cidr</code> type representing either an IPv4 or an IPv6 network","Iterate over tree","Leaf nodes represent prefixes part of the set","Leaf node","Nodes of a CidrMap can be either an InnerNode (with two …","IPv4 network","IPv4 network","IPv4 network","IPv4 network","IPv4 network","IPv6 network","IPv6 network","IPv6 network","IPv6 network","IPv6 network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","check whether an address is contained in the network","check whether an address is contained in the network","","","","","","","","","","","","","","IP family of the contained address (<code>Ipv4</code> or <code>Ipv6</code>).","IP family of the contained address (<code>Ipv4</code> or <code>Ipv6</code>).","","first address in the network","first address in the network","","first address in the network as plain address","first address in the network as plain address","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[(T,V); N]</code> into a <code>CidrSet</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>CidrSet</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Add a new prefix =&gt; value mapping.  (Partially) overwrites …","","Add a new prefix =&gt; value mapping.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether representing any address","whether network represents a single host address","whether network represents a single host address","","Whether representing an IPv4 network","Whether representing an IPv4 network","Whether representing an IPv6 network","Whether representing an IPv6 network","Iterate over all values in the map","","Iterate over all addresses in the range.  With IPv6 …","The longest shared prefix of all nodes in this sub tree.","","","last address in the network","last address in the network","","last address in the network as plain address","last address in the network as plain address","","","","network mask: an pseudo address which has the first …","network mask: an pseudo address which has the first …","","length in bits of the shared prefix of the contained …","length in bits of the shared prefix of the contained …","","new iterator","","","Create new network from address and prefix length.  If the …","Create new network from address and prefix length.  If the …","","Create a network containing a single address (network …","","Create a network containing a single address (network …","","","","","","","","","Read-only access to the tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,4,4,0,0,0,0,0,0,8,0,0,0,0,8,0,4,4,4,12,12,4,4,4,12,12,2,4,47,2,8,9,10,11,4,12,47,2,8,9,10,11,4,12,4,2,8,9,10,11,4,12,2,8,9,10,11,4,12,4,12,2,11,4,12,12,2,11,11,4,12,4,12,4,12,11,4,12,4,12,12,4,12,12,4,12,12,4,2,8,9,10,11,4,4,12,12,47,2,2,8,9,10,11,11,11,4,4,4,4,4,12,12,12,2,11,2,2,4,12,4,4,12,2,2,4,12,2,11,2,47,2,2,8,9,10,11,11,4,12,47,12,4,4,12,12,4,12,4,12,2,12,12,8,10,9,4,12,12,4,12,12,10,4,4,12,12,4,12,12,47,2,11,4,12,12,4,12,12,47,4,4,12,10,10,0,10,2,11,4,12,4,4,2,2,2,8,9,10,11,4,12,4,12,47,2,8,9,10,11,4,12,47,2,8,9,10,11,4,12,47,2,8,9,10,11,4,12,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[2,[1]]]]]],[[4,5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,6]],[[[2,[[0,[7,7]]]]],[[2,[[0,[7,7]]]]]],[[[8,[[0,[7,7]]]]],[[8,[[0,[7,7]]]]]],[[[9,[[0,[7,7]]]]],[[9,[[0,[7,7]]]]]],[[[10,[[0,[7,7]]]]],[[10,[[0,[7,7]]]]]],[11,11],[4,4],[12,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,4],13],[[12,12],13],[[[2,[7]],14],5],[[11,14],5],[[4,14],5],[[12,14],5],[[12,14],5],[[],[[2,[7]]]],[[],11],[15,[[16,[11]]]],[15,[[16,[4]]]],[15,[[16,[12]]]],[[4,4],5],[[12,12],5],[[],5],[[],5],[17,[[16,[18,19]]]],[17,[[16,[18,19]]]],[17,[[16,[18,19]]]],[4,[[21,[20]]]],[12,20],[12,20],[4,[[21,[22]]]],[12,22],[12,22],[4,[[21,[14]]]],[12,14],[12,14],[[4,6]],[[[2,[[0,[7,23]]]],24],25],[[[8,[[0,[7,23]]]],24],25],[[[9,[[0,[7,23]]]],24],25],[[[10,[[0,[7,23]]]],24],25],[[11,24],25],[[4,24],[[16,[26]]]],[[4,24],[[16,[26]]]],[[12,24],[[16,[26]]]],[[12,24],[[16,[26]]]],[[]],[[]],[27,[[2,[[0,[7,28]]]]]],[[]],[[]],[[]],[[[27,[[0,[28,[29,[4]]]]]]],11],[[[30,[4]]],11],[[]],[[]],[[[21,[12]]],4],[31,4],[32,4],[12,4],[[]],[32,12],[31,12],[33,[[2,[[0,[7,34]]]]]],[33,11],[[35,36],[[16,[37]]]],[[38,36],[[16,[37]]]],[39,[[16,[4,40]]]],[39,[[16,[12,40]]]],[[4,6],5],[[[0,[41,42]],43],44],[[[0,[41,42]],43],44],[[[2,[7]],14],[[21,[7]]]],[[[2,[7]],4],[[21,[7]]]],[[4,45]],[[12,45]],[[[2,[[0,[7,46]],7]],4,[0,[7,46]],7]],[[11,[0,[28,[29,[4]]]]]],[[[2,[7,7]],4,7,7]],[[]],[[[2,[7]]],30],[[]],[[]],[[]],[[]],[11,[[30,[4]]]],[[]],[[]],[[]],[[]],[12],[4,5],[4,5],[12,5],[12,5],[4,5],[12,5],[4,5],[12,5],[[[2,[7]]],[[47,[7]]]],[12,[[48,[14]]]],[12,[[48,[14]]]],[[[8,[7]]],4],[[[10,[7]]],4],0,[4,[[21,[22]]]],[12,22],[12,22],[4,[[21,[14]]]],[12,14],[12,14],[[[10,[7]]],[[8,[7]]]],[4,6],[4,[[21,[14]]]],[12,14],[12,14],[4,[[21,[49]]]],[12,49],[12,49],[[[2,[7]]],[[47,[7]]]],[[],[[2,[7]]]],[[],11],[[14,49],[[16,[4,40]]]],[[14,49],[[16,[12,40]]]],[[14,49],[[16,[12,40]]]],[14,4],[14,12],[14,12],[[[47,[7]]],21],[[],4],[[4,4],[[21,[13]]]],[[12,12],[[21,[13]]]],[[[10,[7]],4],[[8,[7]]]],[[[10,[7]],4],[[8,[7]]]],[36,50],[[[10,[7]]],[[8,[7]]]],[[[2,[7]]],[[21,[[8,[7]]]]]],[[11,51],16],[[4,51],16],[[12,51],16],[[4,6,5]],[[4,4],6],[36,[[16,[35,37]]]],[36,[[16,[38,37]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[],52],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],0],"c":[],"p":[[4,"CacheValue"],[3,"CidrMap"],[8,"UserDataMethods"],[4,"AnyIpCidr"],[15,"bool"],[15,"usize"],[8,"Clone"],[4,"Node"],[3,"Leaf"],[3,"InnerNode"],[3,"CidrSet"],[4,"IpCidr"],[4,"Ordering"],[4,"IpAddr"],[8,"Deserializer"],[4,"Result"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[4,"Family"],[4,"Option"],[4,"IpInet"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"array"],[8,"Ord"],[8,"Into"],[3,"Vec"],[3,"Ipv6Cidr"],[3,"Ipv4Cidr"],[8,"IntoIterator"],[8,"Eq"],[4,"Value"],[3,"Lua"],[4,"Error"],[3,"MultiValue"],[15,"str"],[4,"NetworkParseError"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[8,"PartialEq"],[3,"Iter"],[3,"InetIterator"],[15,"u8"],[6,"Result"],[8,"Serializer"],[3,"String"],[3,"TypeId"]]},\
"config":{"doc":"","t":"DDGLFLLLLLLLLFLFLLLLFFFLLFLLLFLLFFFFFLLLLLLL","n":["CallbackSignature","LuaConfig","RegisterFunc","allow_multiple","any_err","async_call_callback","async_call_callback_non_default","async_call_callback_non_default_opt","async_call_ctor","borrow","borrow","borrow_mut","borrow_mut","decorate_callback_name","decorated_name","does_callback_allow_multiple","drop","fmt","from","from","from_lua_value","get_or_create_module","get_or_create_sub_module","into","into","load_config","name","new","new_with_multiple","register","register","remove_registry_value","serialize_options","set_max_age","set_max_spare","set_max_use","set_policy_path","try_from","try_from","try_into","try_into","type_id","type_id","with_registry_value"],"q":[[0,"config"]],"d":["CallbackSignature is a bit sugar to aid with statically …","","","Return true if this signature allows multiple instances to …","Helper for mapping back to lua errors","","","","Call a constructor registered via <code>on</code>. Returns a registry …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a lua value to a deserializable type, with a …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Operate on an object/value that was previously constructed …"],"i":[0,0,0,3,0,7,7,7,7,3,7,3,7,0,3,0,7,7,3,7,0,0,0,3,7,0,3,3,3,0,3,7,0,0,0,0,0,3,7,3,7,3,7,7],"f":[0,0,0,[[[3,[1,2]]],4],[5,6],[[7,[3,[[0,[1,8]],[0,[2,9]]]],[0,[1,8]]],[[10,[[0,[2,9]]]]]],[[7,[3,[[0,[1,8]],2]],[0,[1,8]]],[[10,[2]]]],[[7,[3,[[0,[1,8]],[12,[11]]]],[0,[1,8]]],[[10,[[12,[11]]]]]],[[7,[3,[[0,[1,8]],13]],[0,[1,8]]],[[10,[14]]]],[[]],[[]],[[]],[[]],[15,16],[[[3,[1,2]]],16],[15,4],[7],[[7,17],18],[[]],[[]],[[19,13],[[21,[20]]]],[[19,15],[[10,[22]]]],[[19,15],[[10,[22]]]],[[]],[[]],[[],[[10,[7]]]],[[[3,[1,2]]],15],[[[24,[[23,[15]]]]],[[3,[1,2]]]],[[[24,[[23,[15]]]]],[[3,[1,2]]]],[25],[[[3,[1,2]]]],[[7,14],10],[[],26],[27],[27],[27],[28,10],[[],29],[[],29],[[],29],[[],29],[[],30],[[],30],[[7,14,31],[[10,[2]]]]],"c":[],"p":[[8,"ToLuaMulti"],[8,"FromLuaMulti"],[3,"CallbackSignature"],[15,"bool"],[8,"Display"],[4,"Error"],[3,"LuaConfig"],[8,"Clone"],[8,"Default"],[6,"Result"],[8,"FromLua"],[4,"Option"],[4,"Value"],[3,"RegistryKey"],[15,"str"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"Lua"],[8,"Deserialize"],[6,"Result"],[3,"Table"],[4,"Cow"],[8,"Into"],[6,"RegisterFunc"],[3,"Options"],[15,"usize"],[3,"PathBuf"],[4,"Result"],[3,"TypeId"],[8,"FnOnce"]]},\
"data_loader":{"doc":"","t":"NNENLLLLLLLLLLLLLLLFLLLLMMMMM","n":["Data","File","KeySource","Vault","borrow","borrow_mut","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","get","get_hash","hash","into","register","to_owned","try_from","try_into","type_id","key_data","vault_address","vault_mount","vault_path","vault_token"],"q":[[0,"data_loader"],[24,"data_loader::KeySource"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,17,18,18,18,18],"f":[0,0,0,0,[[]],[[]],[1,1],[[]],[2,[[3,[1]]]],[[1,1],4],[[],4],[[],4],[[],4],[[1,5],6],[[]],[1,[[9,[[8,[7]]]]]],[[[0,[10,11]],12],13],[[1,14]],[[]],[15,9],[[]],[[],3],[[],3],[[],16],0,0,0,0,0],"c":[],"p":[[4,"KeySource"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Vec"],[6,"Result"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[3,"Lua"],[3,"TypeId"],[13,"Data"],[13,"Vault"]]},\
"dns_resolver":{"doc":"","t":"NDNEDLLLLLLMLLLLLLLLLMLLLLLLLLLLLLFFLMLLLLFFFMMLLFLLFLFALLLMLLLLLLLLLLLLLLLLLLDENNLLMLLLLMMLLLLLMMLLMMLLLLLLLLM","n":["Addresses","MailExchanger","NullMx","ResolvedMxAddresses","TLSA","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_pref","cert_data","cert_usage","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","domain_name","emit","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","fully_qualify","get_resolver","hash","hosts","into","into","into","into_rdata","ip_lookup","ipv4_lookup","ipv6_lookup","is_domain_literal","is_secure","matching","new","reconfigure_resolver","record_type","resolve","resolve_a_or_aaaa","resolve_addresses","resolve_dane","resolver","selector","serialize","serialize","site_name","to_owned","to_owned","to_owned","to_string","try_borrow","try_from","try_from","try_from","try_from_rdata","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Answer","Resolver","Tokio","Unbound","as_addr","as_txt","bogus","borrow","borrow","borrow_mut","borrow_mut","canon_name","expires","fmt","from","from","into","into","nxdomain","records","resolve","resolve_txt","response_code","secure","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","why_bogus"],"q":[[0,"dns_resolver"],[78,"dns_resolver::resolver"]],"d":["","","","","RFC 6698, DNS-Based Authentication for TLS","","","","","","","","Binary data for validating the cert, see other members to …","Specifies the provided association that will be used to …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","DNSSEC verified","Specifies how the certificate association is presented","Constructs a new TLSA","","","","","","Resolves TLSA records for a destination name and port …","","Specifies which part of the TLS certificate presented by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[6,0,6,0,0,5,6,1,5,6,1,5,1,1,5,6,1,5,6,1,1,5,1,1,1,1,1,5,6,1,1,5,6,1,0,0,1,5,5,6,1,1,0,0,0,5,5,1,1,0,1,5,0,5,0,0,1,5,1,5,5,6,1,1,1,5,6,1,1,5,6,1,5,6,1,5,6,1,0,0,18,18,34,34,34,18,34,18,34,34,34,34,18,34,18,34,34,34,18,18,34,34,18,34,18,34,18,34,18,34,34],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,[[3,[2]]]],[1,4],[5,5],[6,6],[1,1],[[]],[[]],[[]],[7,[[8,[1]]]],0,[[1,9],[[8,[10]]]],[[1,1],11],[[],11],[[],11],[[],11],[[5,12],13],[[6,12],13],[[1,12],[[8,[14]]]],[[1,12],[[8,[14]]]],[[]],[[]],[[]],[15,[[17,[16]]]],[[],[[19,[18]]]],[[1,20]],0,[[]],[[]],[[]],[1,21],[15,22],[15,22],[15,22],0,0,[1,23],[[4,24,23,[26,[2,25]]],1],[18],[1,27],[15,[[22,[[19,[5]]]]]],[15,[[22,[[26,[28]]]]]],[5,6],[[15,29],[[22,[[26,[1]]]]]],0,[1,24],[[5,30],8],[[1,30],8],0,[[]],[[]],[[]],[[],31],[21,[[32,[1]]]],[[],8],[[],8],[[],8],[21,[[8,[1,21]]]],[[],8],[[],8],[[],8],[[],33],[[],33],[[],33],[[]],[[]],[[]],0,0,0,0,[34,[[26,[35]]]],[34,[[26,[31]]]],0,[[]],[[]],[[]],[[]],0,0,[[34,12],13],[[]],[[]],[[]],[[]],0,0,[[18,[0,[36,37]],27],[[22,[34]]]],[[18,[0,[36,37]]],[[22,[34]]]],0,0,[[],8],[[],8],[[],8],[[],8],[[],33],[[],33],[[]],[[]],0],"c":[],"p":[[3,"TLSA"],[15,"u8"],[15,"slice"],[4,"CertUsage"],[3,"MailExchanger"],[4,"ResolvedMxAddresses"],[8,"Deserializer"],[4,"Result"],[3,"BinEncoder"],[3,"ProtoError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"str"],[3,"Name"],[6,"ResolveResult"],[4,"Resolver"],[3,"Arc"],[8,"Hasher"],[4,"RData"],[6,"Result"],[4,"Matching"],[4,"Selector"],[3,"Global"],[3,"Vec"],[4,"RecordType"],[3,"ResolvedAddress"],[15,"u16"],[8,"Serializer"],[3,"String"],[4,"Option"],[3,"TypeId"],[3,"Answer"],[4,"IpAddr"],[8,"IntoName"],[8,"TryParseIp"]]},\
"domain_map":{"doc":"This module provides a simple datastructure that can store …","t":"DLLLLLLLLLLLLLLLLLFLLLLLLL","n":["DomainMap","add_methods","borrow","borrow_mut","clone","clone_into","default","deserialize","erased_serialize","fmt","from","from","from_lua","from_lua_multi","get","insert","into","new","register","serialize","to_lua","to_lua_multi","to_owned","try_from","try_into","type_id"],"q":[[0,"domain_map"]],"d":["A DomainMap is conceptually similar to a HashMap. The …","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2],"f":[0,[[[3,[[2,[1]]]]]],[[]],[[]],[[[2,[[0,[4,4]]]]],[[2,[[0,[4,4]]]]]],[[]],[[],[[2,[[0,[5,4]]]]]],[6,[[8,[[2,[[0,[7,4]]]]]]]],[9,[[8,[10,11]]]],[[[2,[[0,[12,4]]]],13],14],[[]],[[[16,[15,4]]],[[2,[4]]]],[[17,18],[[8,[19]]]],[[20,18],[[8,[19]]]],[[[2,[4]],21],[[22,[4]]]],[[[2,[4]],21,4]],[[]],[[],[[2,[4]]]],[18,23],[[[2,[[0,[24,4]]]],25],8],[18,[[8,[17,19]]]],[18,[[8,[20,19]]]],[[]],[[],8],[[],8],[[],26]],"c":[],"p":[[4,"CacheValue"],[3,"DomainMap"],[8,"UserDataMethods"],[8,"Clone"],[8,"Default"],[8,"Deserializer"],[8,"Deserialize"],[4,"Result"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"String"],[3,"BTreeMap"],[4,"Value"],[3,"Lua"],[4,"Error"],[3,"MultiValue"],[15,"str"],[4,"Option"],[6,"Result"],[8,"Serialize"],[8,"Serializer"],[3,"TypeId"]]},\
"duration_serde":{"doc":"Based on https://github.com/jean-airoldie/humantime-serde …","t":"DLLLLFLLLLLLLFLLLLLLLL","n":["Wrap","borrow","borrow_mut","clone","clone_into","deserialize","deserialize","deserialize","eq","equivalent","from","hash","into","serialize","serialize","serialize","serialize","serialize","to_owned","try_from","try_into","type_id"],"q":[[0,"duration_serde"]],"d":["A wrapper type which implements <code>Serialize</code> and <code>Deserialize</code> …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[3,4],[3,[[4,[[2,[5]]]]]],[3,[[4,[[2,[[6,[5]]]]]]]],[[[2,[7]],[2,[7]]],8],[[],8],[[]],[[[2,[9]],10]],[[]],[11,4],[[[2,[5]],11],4],[[[2,[5]],11],4],[[[2,[[6,[5]]]],11],4],[[[2,[[6,[5]]]],11],4],[[]],[[],4],[[],4],[[],12]],"c":[],"p":[[8,"Clone"],[3,"Wrap"],[8,"Deserializer"],[4,"Result"],[3,"Duration"],[4,"Option"],[8,"PartialEq"],[15,"bool"],[8,"Hash"],[8,"Hasher"],[8,"Serializer"],[3,"TypeId"]]},\
"kumo_api_types":{"doc":"","t":"DDDDNNNNDDNDNDDDDDDDDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLMMMMMMALLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLAMMMMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMNDNNNNELMLLLLMLLLLMMLLLLLLLLLLMMMMLLLLLLLLLLLLLLLMMMMMLMMMMMLLLLLLLLLLLLEDDNDDDNDNNEMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMFLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLM","n":["BounceV1CancelRequest","BounceV1ListEntry","BounceV1Request","BounceV1Response","Callback","Closed","Connected","Diagnostic","InspectMessageV1Request","InspectMessageV1Response","MessageDisposition","MessageInformation","Read","SetDiagnosticFilterRequest","SuspendReadyQueueV1ListEntry","SuspendReadyQueueV1Request","SuspendV1CancelRequest","SuspendV1ListEntry","SuspendV1Request","SuspendV1Response","TraceSmtpV1Event","TraceSmtpV1Payload","TraceSmtpV1Request","Write","apply_to_url","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounced","bounced","campaign","campaign","campaign","campaign","clone","clone","clone_into","clone_into","conn_meta","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","domain","domain","domain","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","duration","duration","duration","duration","duration","duration","duration","duration","duration","egress_path","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_params","message","meta","name","name","payload","reason","reason","reason","reason","reason","reason","recipient","response","response","response","routing_domain","routing_domain","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","schema","sender","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shaping","source_addr","suppress_logging","tenant","tenant","tenant","tenant","to_owned","to_owned","total_bounced","total_bounced","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","want_body","when","error","id","level","log_arf","log_oob","message","meta","name","queue","recipient","relay","result","sender","Disabled","EgressPathConfig","Opportunistic","OpportunisticInsecure","Required","RequiredInsecure","Tls","allow_insecure","allow_smtp_auth_plain_without_tls","borrow","borrow","borrow_mut","borrow_mut","client_timeouts","clone","clone","clone_into","clone_into","connection_limit","consecutive_connection_failures_before_delay","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","ehlo_domain","enable_dane","enable_mta_sts","enable_tls","eq","equivalent","equivalent","equivalent","erased_serialize","fmt","fmt","from","from","from_lua","from_lua_multi","init","init","into","into","max_connection_rate","max_deliveries_per_connection","max_message_rate","max_ready","prohibited_hosts","serialize","skip_hosts","smtp_auth_plain_password","smtp_auth_plain_username","smtp_port","suspended","to_lua","to_lua_multi","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Action","EgressPathConfigValue","HashableTomlValue","Immediate","MergedEntry","Regex","Rule","SetConfig","Shaping","Suspend","Threshold","Trigger","action","add_methods","automation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_and_set_rollup","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","duration","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_lua","from_lua_multi","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_warnings","hash","hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","match_rules","matches","merge_files","name","params","regex","register","serialize","serialize","serialize","serialize","serialize","serialize","sources","to_lua","to_lua_multi","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trigger","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","was_rollup"],"q":[[0,"kumo_api_types"],[381,"kumo_api_types::TraceSmtpV1Payload"],[394,"kumo_api_types::egress_path"],[466,"kumo_api_types::shaping"]],"d":["","","Describes which messages should be bounced. The criteria …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A map of queue name to number of bounced messages that …","A map of queue name to number of bounced messages that …","The campaign name to match. If omitted, any campaign will …","The campaign field of the original request, if any.","The campaign name to match. If omitted, any campaign will …","The campaign name to match. If omitted, any campaign will …","","","","","","If <code>want_body</code> was set in the original request, holds the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The domain name to match. If omitted, any domain will …","The domain field of the original request, if any.","The domain name to match. If omitted, any domain will …","The domain name to match. If omitted, any domain will …","","","","","","","","","","","","","","","","","","","","","Defaults to “5m”. Specifies how long this bounce …","The time remaining until this entry expires and is …","Specifies how long this suspension remains active.","Specifies how long this suspension remains active.","Specifies how long this suspension remains active.","how long until this suspension expires and is …","","","","","","","","","","","","","","","","","","","The diagnostic filter spec to use","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The id of the bounce rule that was registered. This can be …","The id of this bounce rule. Corresponds to the <code>id</code> field …","","The id of the suspension. This can be used later to cancel …","The id of the suspension to cancel","The id of the suspension. This can be used later to cancel …","The id for the suspension. Can be used to cancel the …","The spool identifier for the message whose information is …","The spool identifier of the message","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The message information","The message metadata","The name of the ready queue that should be suspended","The name of the ready queue that is suspended","","Reason to log in the delivery log. Each matching message …","The reason field of the original request","The reason for the suspension","The reason for the suspension","The reason for the suspension","The reason for the suspension","The envelope-to address","","","","The routing_domain name to match. If omitted, any …","The routing_domain field of the original request, if any.","","","","","","","","","","","","","","","","","The envelope sender","","","","","","","","","","","","","","","","","","","","If true, do not generate AdminBounce delivery logs for …","The tenant to match. If omitted, any tenant will match.","The tenant field of the original request, if any.","The tenant name to match. If omitted, any tenant will …","The tenant name to match. If omitted, any tenant will …","","","The sum of the number of bounced messages reported by the …","The sum of the number of bounced messages reported by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If true, return the message body in addition to the …","","","","","","","","","","","","","","","Do not try to use TLS","","Use it if available. If the peer has invalid or …","Use it if available, and allow self-signed or otherwise …","TLS with valid certs is required.","Required, and allow self-signed or otherwise invalid …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Represents an individual EgressPathConfig field name and …","toml::Value is not Hash because it may contain floating …","Trigger on the first match, immediately","","","","","","","Trigger when a certain number of matches occur over a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,4,4,4,4,0,0,4,0,4,0,0,0,0,0,0,0,0,0,0,4,1,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,9,11,7,11,13,16,3,4,3,4,3,20,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,11,13,16,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,13,17,7,11,13,16,17,18,0,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,10,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,9,11,12,14,15,16,18,1,19,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,1,19,20,17,18,3,7,11,13,16,17,18,20,9,14,19,7,11,7,9,10,11,12,13,14,15,16,17,18,19,20,21,3,4,20,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,0,21,7,7,11,13,16,3,4,9,11,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,7,9,10,11,12,13,14,15,16,17,18,1,19,20,21,3,4,1,3,61,62,63,62,62,63,62,61,62,62,62,61,62,33,0,33,33,33,33,0,33,35,33,35,33,35,35,33,35,33,35,35,35,33,35,33,35,33,35,33,35,33,35,35,35,35,35,33,33,33,33,33,33,35,33,35,35,35,33,35,33,35,35,35,35,35,35,33,35,35,35,35,35,35,35,33,35,33,35,33,35,33,35,33,35,0,0,0,46,0,0,0,45,0,45,46,0,47,40,48,42,43,44,45,46,47,40,48,42,43,44,45,46,47,40,48,42,43,44,45,46,47,40,47,42,43,44,45,46,47,40,46,48,42,42,43,43,44,45,46,47,40,48,42,43,44,45,46,47,40,48,42,43,44,45,46,47,42,43,44,45,46,47,40,48,47,42,43,44,45,46,47,42,43,44,45,46,47,40,48,42,43,43,44,45,46,47,40,48,40,40,42,43,44,45,46,47,40,42,43,44,45,46,47,42,43,44,45,46,47,40,48,42,43,44,45,46,47,40,48,40,47,40,44,48,47,0,42,43,44,45,46,47,48,40,40,42,43,44,45,46,47,40,47,42,42,43,44,45,46,47,40,48,42,43,44,45,46,47,40,48,42,43,44,45,46,47,40,48,44,42,43,44,45,46,47,40,48,47],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[3,3],[4,4],[[]],[[]],0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[8,[7]]]],[6,[[8,[9]]]],[6,[[8,[10]]]],[6,[[8,[11]]]],[6,[[8,[12]]]],[6,[[8,[13]]]],[6,[[8,[14]]]],[6,[[8,[15]]]],[6,[[8,[16]]]],[6,[[8,[17]]]],[6,[[8,[18]]]],[6,[[8,[1]]]],[6,[[8,[19]]]],[6,[[8,[20]]]],[6,[[8,[21]]]],[6,[[8,[3]]]],[6,[[8,[4]]]],0,0,0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[7,22],[13,22],[17,22],0,0,0,0,0,0,0,[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],0,[[7,26],27],[[9,26],27],[[10,26],27],[[11,26],27],[[12,26],27],[[13,26],27],[[14,26],27],[[15,26],27],[[16,26],27],[[17,26],27],[[18,26],27],[[1,26],27],[[19,26],27],[[20,26],27],[[21,26],27],[[3,26],27],[[4,26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,[[30,[29]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[7,31],8],[[9,31],8],[[10,31],8],[[11,31],8],[[12,31],8],[[13,31],8],[[14,31],8],[[15,31],8],[[16,31],8],[[17,31],8],[[18,31],8],[[1,31],8],[[19,31],8],[[20,31],8],[[21,31],8],[[3,31],8],[[4,31],8],0,0,0,0,0,0,0,[[]],[[]],0,0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[33,34],0,[[]],[[]],[[]],[[]],0,[33,33],[35,35],[[]],[[]],0,0,[[],33],[[],35],[5],[5],[5],[5],[6,[[8,[33]]]],[6,[[8,[35]]]],[5],[5],0,0,0,0,[[33,33],34],[[],34],[[],34],[[],34],[23,[[8,[24,25]]]],[[33,26],27],[[35,26],27],[[]],[[]],[[36,37],[[8,[38]]]],[[39,37],[[8,[38]]]],[[],5],[[],5],[[]],[[]],0,0,0,0,0,[[33,31],8],0,0,0,0,0,[37,[[8,[36,38]]]],[37,[[8,[39,38]]]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],32],[[],32],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[41,[40]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[40,40],[47,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],46],[[],48],[5],[42],[43,49],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[8,[42]]]],[6,[[8,[43]]]],[6,[[8,[44]]]],[6,[[8,[45]]]],[6,[[8,[46]]]],[6,[[8,[47]]]],[5],[5],[5],[5],[5],[5],[5],[5],0,[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[23,[[8,[24,25]]]],[[42,26],27],[[43,26],27],[[44,26],27],[[45,26],27],[[46,26],27],[[47,26],27],[[40,26],27],[[48,26],27],[[]],[49,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,37],[[8,[38]]]],[[39,37],[[8,[38]]]],[[[0,[50,51]],52],53],[[[0,[50,51]],52],53],[[[0,[50,51]],52],53],[[[0,[50,51]],52],53],[[[0,[50,51]],52],53],[[[0,[50,51]],52],53],[40,[[55,[54]]]],[[42,56]],[[43,56]],[[44,56]],[[45,56]],[[46,56]],[[47,56]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[40,57,58,58],[[30,[47]]]],[[47,58],34],[[[55,[54]]],[[59,[40]]]],0,0,0,[37,59],[[42,31],8],[[43,31],8],[[44,31],8],[[45,31],8],[[46,31],8],[[47,31],8],0,[37,[[8,[36,38]]]],[37,[[8,[39,38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],8],[54,[[60,[42]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0],"c":[],"p":[[3,"InspectMessageV1Request"],[3,"Url"],[3,"TraceSmtpV1Event"],[4,"TraceSmtpV1Payload"],[15,"usize"],[8,"Deserializer"],[3,"BounceV1Request"],[4,"Result"],[3,"BounceV1Response"],[3,"SetDiagnosticFilterRequest"],[3,"BounceV1ListEntry"],[3,"BounceV1CancelRequest"],[3,"SuspendV1Request"],[3,"SuspendV1Response"],[3,"SuspendV1CancelRequest"],[3,"SuspendV1ListEntry"],[3,"SuspendReadyQueueV1Request"],[3,"SuspendReadyQueueV1ListEntry"],[3,"InspectMessageV1Response"],[3,"MessageInformation"],[3,"TraceSmtpV1Request"],[3,"Duration"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[3,"Formatter"],[6,"Result"],[8,"Fn"],[3,"Parameter"],[3,"Vec"],[8,"Serializer"],[3,"TypeId"],[4,"Tls"],[15,"bool"],[3,"EgressPathConfig"],[4,"Value"],[3,"Lua"],[4,"Error"],[3,"MultiValue"],[3,"Shaping"],[8,"UserDataMethods"],[3,"Regex"],[3,"HashableTomlValue"],[3,"EgressPathConfigValue"],[4,"Action"],[4,"Trigger"],[3,"Rule"],[3,"MergedEntry"],[4,"Value"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[3,"String"],[15,"slice"],[8,"Hasher"],[3,"JsonLogRecord"],[15,"str"],[6,"Result"],[6,"Result"],[13,"Callback"],[13,"MessageDisposition"],[13,"Diagnostic"]]},\
"kumo_dkim":{"doc":"","t":"NNNEENNNNNNNNNNNNNNNNENNNNNNDDDNNNNNLLLLLLLLLLLLLALLLLLALLLLLLLLLLLLLLLLLLLLLLMLLFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFLLLLLLLLLLLLLLMMNNELLLLLLLLLLLLLLIK","n":["BodyHashDidNotVerify","BuilderError","CanonicalLineEndingsRequired","DKIMError","DkimPrivateKey","DomainMismatch","Ed25519","FailedToSign","FromFieldNotSigned","FullyParsed","HeaderOnlyParse","HeaderSerializeError","InappropriateKeyAlgorithm","IncompatibleVersion","KeyIncompatibleVersion","KeySyntaxError","KeyUnavailable","MailParsingError","MalformedBody","NoKeyForSignature","OpenSSLRsa","ParsedEmail","PrivateKeyLoadError","Rsa","SignatureDidNotVerify","SignatureExpired","SignatureMissingRequiredTag","SignatureSyntaxError","Signer","SignerBuilder","Tag","UnacceptableSignatureHeader","UnknownInternalError","UnsupportedCanonicalizationType","UnsupportedHashAlgorithm","UnsupportedQueryMethod","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","canonicalization","clone","clone","clone_into","clone_into","default","dns","ed25519_key","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_body","get_headers","into","into","into","into","into","into","name","new","parse","parse_tag_list","provide","raw_value","rsa_key","rsa_key_file","sign","source","status","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","verify_email","verify_email_with_resolver","vzip","vzip","vzip","vzip","vzip","vzip","with_body_canonicalization","with_expiry","with_header_canonicalization","with_private_key","with_selector","with_signed_headers","with_signing_domain","with_time","bytes","parsed","Relaxed","Simple","Type","borrow","borrow_mut","canon_name","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","Lookup","lookup_txt"],"q":[[0,"kumo_dkim"],[128,"kumo_dkim::ParsedEmail"],[130,"kumo_dkim::canonicalization"],[147,"kumo_dkim::dns"]],"d":["","","","DKIM errors","","","","","","","","","","","","","","","","","","","","","","","","","","Builder for the Signer","DKIM signature tag","","","","","","","","","","","","","","","","","","Build an instance of the Signer Must be provided: …","","","","","","","","Parse PKCS8 encoded ed25519 key data into a DkimPrivateKey.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Name of the tag (v, i, a, h, …)","New builder","","Main entrypoint of the parser. Parses the DKIM signature …","","Value of the tag as seen in the text","Parse RSA key data into a DkimPrivateKey","Load RSA key data from a file and parse it into a …","Sign a message As specified in …","","","","","","","","","","","","","","","","","","","","","","","","","Value of the tag with spaces removed","Run the DKIM verification on the email","Run the DKIM verification on the email providing an …","","","","","","","Specify the body canonicalization","Specify a expiry duration for the signature validity","Specify the header canonicalization","Specify the private key used to sign the email","Specify the private key used to sign the email","Specify headers to be used in the DKIM signature The From: …","Specify for which domain the email should be signed for","Specify current time. Mostly used for testing","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A trait for entities that perform DNS resolution.",""],"i":[3,3,3,0,0,3,8,3,3,13,13,3,3,3,3,3,3,3,3,3,8,0,3,8,3,3,3,3,0,0,0,3,3,3,3,3,13,1,2,3,5,8,13,1,2,3,5,8,1,0,3,5,3,5,1,0,8,3,5,3,3,5,8,13,1,2,3,3,5,8,13,13,13,1,2,3,5,8,5,1,13,0,3,5,8,8,2,3,3,3,5,3,13,13,1,2,3,5,8,13,1,2,3,5,8,13,1,2,3,5,8,5,0,0,13,1,2,3,5,8,1,1,1,1,1,1,1,1,36,36,30,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[4,[2,3]]]],0,[3,3],[5,5],[[]],[[]],[[],1],0,[[[7,[6]]],[[4,[8,3]]]],[[3,3],9],[[5,5],9],[[3,10],11],[[3,10],11],[[5,10],11],[[8,10],11],[[]],[[]],[[]],[[]],[12,3],[[]],[[]],[13,14],[13,15],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[[16,[14]]],[[4,[13,3]]]],[17,[[19,[17,[18,[5]]]]]],[20],0,[[[7,[6]]],[[4,[8,3]]]],[[[22,[21]]],[[4,[8,3]]]],[[2,13],[[4,[23,3]]]],[3,[[25,[24]]]],0,[[]],[[]],[[],23],[26,[[4,[13,3]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,[[17,13],[[4,[[18,[28]],3]]]],[[17,13,29],[[4,[[18,[28]],3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,30],1],[[1,31],1],[[1,30],1],[[1,8],1],[[1,[16,[23]]],1],[[1,32],[[4,[1,3]]]],[[1,[16,[23]]],1],[[1,[34,[33]]],1],0,0,0,0,0,[[]],[[]],[30,17],[30,30],[[]],[[30,30],9],[[30,10],11],[[]],[[]],[[]],[[],4],[[],4],[[],27],[[]],0,[17,[[35,[[4,[[18,[23]],3]]]]]]],"c":[],"p":[[3,"SignerBuilder"],[3,"Signer"],[4,"DKIMError"],[4,"Result"],[3,"Tag"],[15,"u8"],[15,"slice"],[4,"DkimPrivateKey"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"MailParsingError"],[4,"ParsedEmail"],[4,"SharedString"],[3,"HeaderMap"],[8,"Into"],[15,"str"],[3,"Vec"],[6,"IResult"],[3,"Demand"],[3,"Path"],[8,"AsRef"],[3,"String"],[8,"Error"],[4,"Option"],[3,"MimePart"],[3,"TypeId"],[3,"AuthenticationResult"],[8,"Lookup"],[4,"Type"],[3,"Duration"],[8,"IntoIterator"],[3,"Utc"],[3,"DateTime"],[6,"BoxFuture"],[13,"HeaderOnlyParse"]]},\
"kumo_log_types":{"doc":"","t":"NNNNNNDNNEDNMLLLLLLMLLLLLLLLMMLLLMMLLLLMLLLLLLLMMLLLMMMMMLMMMMMAAMLLLMMMMMMLLLLLLLLLLLLLLLNNDNNDDDNDDEDMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLMMMMMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDMMLLLLLLLLLMMLLMLMMMMLMMMLMMLLLLMML","n":["AdminBounce","Any","Bounce","Delivery","Expiration","Feedback","JsonLogRecord","OOB","Reception","RecordType","ResolvedAddress","TransientFailure","addr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounce_classification","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compare","created","delivery_protocol","deserialize","deserialize","deserialize","egress_pool","egress_source","eq","equivalent","equivalent","equivalent","feedback_report","fmt","fmt","fmt","from","from","from","hash","headers","id","into","into","into","kind","meta","name","nodeid","num_attempts","partial_cmp","peer_address","queue","reception_protocol","recipient","response","rfc3464","rfc5965","sender","serialize","serialize","serialize","site","size","timestamp","tls_cipher","tls_peer_subject_name","tls_protocol_version","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Delayed","Delivered","DiagnosticCode","Expanded","Failed","PerMessageReportEntry","PerRecipientReportEntry","Recipient","Relayed","RemoteMta","Report","ReportAction","ReportStatus","action","arrival_date","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detail","diagnostic","diagnostic_code","diagnostic_type","dsn_gateway","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extensions","extensions","final_log_id","final_recipient","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","into","into","into","into","into","into","into","into","last_attempt_date","mta_type","name","original_envelope_id","original_message","original_recipient","parse","per_message","per_recipient","received_from_mta","recipient","recipient_type","remote_mta","reporting_mta","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","status","subject","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","will_retry_until","ARFReport","arrival_date","authentication_results","borrow","borrow_mut","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","extensions","feedback_type","fmt","from","incidents","into","original_envelope_id","original_mail_from","original_message","original_rcpto_to","parse","reported_domain","reported_uri","reporting_mta","serialize","source_ip","supplemental_trace","to_owned","try_from","try_into","type_id","user_agent","version","vzip"],"q":[[0,"kumo_log_types"],[90,"kumo_log_types::rfc3464"],[282,"kumo_log_types::rfc5965"]],"d":["Administratively failed","Special for matching anything in the logging config","","Recorded by the delivery side, most likely as a result of …","Recorded when a message is expiring from the queue","Contains a feedback report","","Contains information about an OOB bounce","Recorded by a receiving listener","","","","","","","","","","","","","","","","","","","","The time at which the message was initially received and …","The protocol used to deliver, or attempt to deliver, this …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","The message id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","What kind of record this is","","","The id of the node on which the event occurred","The number of delivery attempts that have been made. Note …","","The address of the peer, and our sense of its hostname or …","Which named queue the message was associated with","The protocol used to receive this message","The envelope recipient","The response from/to the peer","This module parses out RFC3464 delivery status reports …","ARF reports","The envelope sender","","","","Which MX site the message was being delivered to","The size of the message, in bytes","The time at which we are logging this event","The TLS Cipher used, if applicable","The Subject Name from the peer TLS certificate, if …","The TLS protocol version used, if applicable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[2,2,2,2,2,2,0,2,2,0,0,2,1,1,2,3,1,2,3,3,1,2,3,1,2,3,2,2,3,3,1,2,3,3,3,2,2,2,2,3,1,2,3,1,2,3,2,3,3,1,2,3,3,3,1,3,3,2,3,3,3,3,3,0,0,3,1,2,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,14,14,0,14,14,0,0,0,14,0,0,0,0,19,20,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,15,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,15,14,15,16,17,18,19,20,21,15,18,19,18,20,14,15,16,17,18,19,20,21,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,19,20,19,19,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,14,15,16,17,18,19,20,21,19,16,16,20,21,19,21,21,21,20,17,17,19,20,14,15,16,17,18,19,20,21,19,15,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,19,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[[]],[[]],[[]],[[2,2],4],[[],4],0,0,[5,[[6,[1]]]],[5,[[6,[2]]]],[5,[[6,[3]]]],0,0,[[2,2],7],[[],7],[[],7],[[],7],0,[[1,8],9],[[2,8],9],[[3,8],9],[[]],[[]],[[]],[[2,10]],0,0,[[]],[[]],[[]],0,0,0,0,0,[[2,2],[[11,[4]]]],0,0,0,0,0,0,0,0,[[1,12],6],[[2,12],6],[[3,12],6],0,0,0,0,0,0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,[[6,[14]]]],[5,[[6,[15]]]],[5,[[6,[16]]]],[5,[[6,[17]]]],[5,[[6,[18]]]],[5,[[6,[19]]]],[5,[[6,[20]]]],[5,[[6,[21]]]],0,0,0,0,0,[[14,14],7],[[15,15],7],[[16,16],7],[[17,17],7],[[18,18],7],[[19,19],7],[[20,20],7],[[21,21],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,0,0,[[14,8],9],[[15,8],9],[[16,8],9],[[17,8],9],[[18,8],9],[[19,8],9],[[20,8],9],[[21,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,[[23,[14]]]],[22,[[23,[15]]]],[22,[[23,[16]]]],[22,[[23,[17]]]],[22,[[23,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[25,[24]]],[[23,[[11,[21]]]]]],0,0,0,0,0,0,0,[[14,12],6],[[15,12],6],[[16,12],6],[[17,12],6],[[18,12],6],[[19,12],6],[[20,12],6],[[21,12],6],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[26,26],[[]],[5,[[6,[26]]]],[[26,26],7],[[],7],[[],7],[[],7],0,0,[[26,8],9],[[]],0,[[]],0,0,0,0,[[[25,[24]]],[[23,[[11,[26]]]]]],0,0,0,[[26,12],6],0,0,[[]],[[],6],[[],6],[[],13],0,0,[[]]],"c":[],"p":[[3,"ResolvedAddress"],[4,"RecordType"],[3,"JsonLogRecord"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[8,"Serializer"],[3,"TypeId"],[4,"ReportAction"],[3,"ReportStatus"],[3,"RemoteMta"],[3,"Recipient"],[3,"DiagnosticCode"],[3,"PerRecipientReportEntry"],[3,"PerMessageReportEntry"],[3,"Report"],[15,"str"],[6,"Result"],[15,"u8"],[15,"slice"],[3,"ARFReport"]]},\
"kumo_server_common":{"doc":"","t":"AAAAAFAADLLLLLLLLLLLLLLLLLLLLLNENNDNLLLLLLMLLLLMLLMLLLLLLLLLLLMFLLMLLLLLLLLLDDDDALLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLMLMMLLMLLLLLLLLLLLLMLLLLENNNDFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMDLLLLLLLLLLLLLLLLLLLLLLLMLFDLLLLLLLLLMMMLLLLLF","n":["config_handle","diagnostic_logging","http_server","nodeid","panic","register","start","tls_helpers","ConfigHandle","borrow","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","from_ref","init","into","into_request","new","to_owned","try_from","try_into","type_id","update","vzip","Compact","DiagnosticFormat","Full","Json","LoggingConfig","Pretty","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default_filter","deref","deref","deref_mut","deref_mut","diag_format","drop","drop","filter_env_var","fmt","from","from","from_ref","init","init","init","into","into","into_request","into_request","log_dir","set_diagnostic_log_filter","to_owned","to_possible_value","tokio_console","try_from","try_from","try_into","try_into","type_id","type_id","value_variants","vzip","vzip","AppError","AppState","HttpListenerParams","RouterAndDocs","auth","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","docs","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","hostname","init","init","init","init","into","into","into","into","into_request","into_request","into_request","into_request","into_response","is_trusted_host","listen","make_docs","router","start","tls_certificate","tls_private_key","to_owned","to_owned","trusted_hosts","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","use_tls","vzip","vzip","vzip","vzip","AuthKind","Basic","Bearer","TrustedIp","TrustedIpRequired","auth_middleware","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_header","from_ref","from_request","from_request","from_request_parts","from_request_parts","init","init","into","into","into_request","into_request","summarize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip","password","token","user","NodeId","borrow","borrow_mut","check","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","from_ref","get","get_uuid","init","into","into_request","new","to_owned","to_string","try_from","try_into","type_id","uuid","vzip","register_panic_hook","StartConfig","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_request","logging","lua_funcs","policy","run","try_from","try_into","type_id","vzip","make_server_config"],"q":[[0,"kumo_server_common"],[8,"kumo_server_common::config_handle"],[30,"kumo_server_common::diagnostic_logging"],[76,"kumo_server_common::http_server"],[158,"kumo_server_common::http_server::auth"],[202,"kumo_server_common::http_server::auth::AuthKind"],[205,"kumo_server_common::nodeid"],[231,"kumo_server_common::panic"],[232,"kumo_server_common::start"],[250,"kumo_server_common::tls_helpers"]],"d":["","","","","","","","","ConfigHandle allows sharing a configuration value of some …","","Borrows the local copy of the config for read. The local …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Updates the upstream, shared value. Other config handles …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents some authenticated identity. Use this as an …","","","","Use this type as an extractor parameter when the handler …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The NodeId is intended to identify a specific instance of …","","","Raises an error if we don’t have a persistent unique …","","","","","","","","Returns the argument unchanged.","","Get the NodeId","Retrieve just the uuid","","Calls <code>U::from(self)</code>.","","","","","","","","Unique node id in the cluster","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,0,13,13,0,13,14,13,14,13,13,13,14,14,13,14,13,14,14,13,14,13,14,13,13,14,14,13,14,13,14,13,14,0,13,13,14,14,13,14,13,14,13,13,14,13,0,0,0,0,0,29,19,20,22,29,19,20,22,19,20,19,20,29,19,20,22,29,19,20,22,19,29,29,19,20,22,19,22,29,19,20,22,22,22,19,20,19,29,19,20,22,29,19,20,22,29,19,20,22,22,20,19,29,29,19,19,19,19,20,19,29,19,20,22,29,19,20,22,29,19,20,22,19,29,19,20,22,0,34,34,34,0,0,50,34,50,34,34,34,50,34,50,34,50,34,34,50,34,34,34,50,34,50,34,50,34,50,34,50,34,34,34,50,34,50,34,50,34,34,50,34,51,52,51,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0],"f":[0,0,0,0,0,[1,2],0,0,0,[[]],[[[4,[3]]],[[5,[3]]]],[[]],[[[4,[[0,[3,3]]]]],[[4,[[0,[3,3]]]]]],[[]],[6],[6],[6],[[[4,[[0,[3,7]]]],8],9],[[]],[[]],[[],6],[[]],[[],10],[3,[[4,[3]]]],[[]],[[],11],[[],11],[[],12],[[[4,[3]],3],6],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[13,13],[[]],0,[6],[6],[6],[6],0,[6],[6],0,[[13,8],9],[[]],[[]],[[]],[14,2],[[],6],[[],6],[[]],[[]],[[],10],[[],10],0,[15,2],[[]],[13,[[17,[16]]]],0,[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],[[18,[13]]]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[6],[21,[[11,[19]]]],0,[6],[6],[6],[6],[[19,8],9],[[22,8],9],[[]],[[]],[[]],[[[24,[23]]],22],[25],[[]],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[22,26],[[20,27],28],0,[29,30],0,[[19,29],2],0,0,[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[[31,[20]],32,33],26],[[]],[[]],[[]],[[]],[34,34],[[]],[6],[6],[6],[6],[6],[6],[[34,8],9],[[]],[[]],[15,[[17,[34]]]],[[]],[32,[[38,[[37,[35,36]]]]]],[32,[[38,[[37,[35,36]]]]]],[[39,[0,[40,41]]],[[38,[[37,[35]]]]]],[[39,[0,[40,41]]],[[38,[[37,[35]]]]]],[[],6],[[],6],[[]],[[]],[[],10],[[],10],[34,42],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[34,[[2,[28]]]],[[]],[[]],0,0,0,0,[[]],[[]],[[],2],[43,43],[[]],[6],[6],[6],[[43,8],9],[[43,8],9],[[]],[[]],[[],43],[[],44],[[],6],[[]],[[],10],[[],43],[[]],[[],42],[[],11],[[],11],[[],12],0,[[]],[[]],0,[[]],[[]],[6],[6],[6],[[]],[[],6],[[]],[[],10],0,0,0,[[45,[0,[46,40]],[0,[46,40]]],2],[[],11],[[],11],[[],12],[[]],[[15,[17,[47]],[17,[47]]],[[2,[[49,[48]]]]]]],"c":[],"p":[[3,"Lua"],[6,"Result"],[8,"Clone"],[3,"ConfigHandle"],[3,"Ref"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Request"],[4,"Result"],[3,"TypeId"],[4,"DiagnosticFormat"],[3,"LoggingConfig"],[15,"str"],[3,"PossibleValue"],[4,"Option"],[15,"slice"],[3,"HttpListenerParams"],[3,"AppState"],[8,"Deserializer"],[3,"AppError"],[3,"Error"],[8,"Into"],[15,"never"],[6,"Response"],[4,"IpAddr"],[15,"bool"],[3,"RouterAndDocs"],[3,"OpenApi"],[3,"State"],[3,"Request"],[3,"Next"],[4,"AuthKind"],[8,"Future"],[3,"Global"],[3,"Box"],[3,"Pin"],[3,"Parts"],[8,"Send"],[8,"Sync"],[3,"String"],[3,"NodeId"],[3,"Uuid"],[3,"StartConfig"],[8,"FnOnce"],[4,"KeySource"],[3,"ServerConfig"],[3,"Arc"],[3,"TrustedIpRequired"],[13,"Basic"],[13,"Bearer"]]},\
"kumo_server_lifecycle":{"doc":"This module helps to manage the life cycle of the process …","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Activity","LifeCycle","ShutdownSubcription","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","drop","fmt","from","from","from","get","get","get_opt","into","into","into","is_shutting_down","new","request_shutdown","shutting_down","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait_for_shutdown"],"q":[[0,"kumo_server_lifecycle"]],"d":["Represents some activity which cannot be ruthlessly …","The LifeCycle struct represents the life_cycle of this …","ShutdownSubcription can be used by code that is idling. …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Obtain an Activity instance. Returns Err if the process is …","Obtain a shutdown subscription","Obtain an Activity instance. If None is returned then the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the process is shutting down.","Initialize the process life_cycle. May be called only …","Request that we shutdown the process. This will cause the …","Await the shutdown of the process","","","","","","","","","","","","","","Wait for a shutdown request, then propagate that state to …"],"i":[0,0,0,1,6,9,1,6,9,1,1,1,1,1,6,9,1,6,1,1,6,9,1,9,9,6,1,1,6,9,1,6,9,1,6,9,1,6,9,9],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[1],[[1,2],3],[[]],[[]],[[]],[4,[[5,[1]]]],[[],6],[4,[[7,[1]]]],[[]],[[]],[[]],[1,8],[[],9],[[]],[6],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[]],[[]],[[]],[9]],"c":[],"p":[[3,"Activity"],[3,"Formatter"],[6,"Result"],[3,"String"],[6,"Result"],[3,"ShutdownSubcription"],[4,"Option"],[15,"bool"],[3,"LifeCycle"],[4,"Result"],[3,"TypeId"]]},\
"kumo_server_memory":{"doc":"This module contains logic to reason about memory usage, …","t":"DDLLLLMLLLLLLLLLLLLFLLFMLLLFLFFMFLLLLLLLLLL","n":["MemoryLimits","MemoryUsage","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","fmt","fmt","fmt","fmt","from","from","get","get_cgroup","get_headroom","get_linux_statm","get_rlimits","get_usage_and_limit","hard_limit","into","into","is_unlimited","low_memory","min","purge_thread_cache","setup_memory_limit","soft_limit","subscribe_to_memory_status_changes","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"kumo_server_memory"]],"d":["Represents a constraint on memory usage","Represents the current memory usage of this process","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the amount of headroom; the number of bytes that …","","","Retrieves the current usage and limits. This is a bit of a …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true when we are within 10% if the soft limit","","To be called when a thread goes idle; it will flush cached …","Initialize the memory thread to monitor memory usage/limits","","Returns a receiver that will notify when memory status …","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,1,2,1,2,1,1,2,2,1,2,1,2,0,1,2,0,2,1,2,2,0,2,0,0,2,0,1,2,1,2,1,2,1,2,1,2],"f":[0,0,[[]],[[]],[[]],[[]],0,[1,1],[2,2],[[]],[[]],[[1,3],4],[[1,3],4],[[2,3],4],[[2,3],4],[[]],[[]],[[],[[5,[1]]]],[6,[[5,[2]]]],[[],7],[[],[[5,[1]]]],[[],[[5,[2]]]],[[],5],0,[[]],[[]],[2,6],[[],6],[[2,2],2],[[]],[[],5],0,[[],8],[[]],[[]],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[],"p":[[3,"MemoryUsage"],[3,"MemoryLimits"],[3,"Formatter"],[6,"Result"],[6,"Result"],[15,"bool"],[15,"usize"],[3,"Receiver"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"kumo_server_runtime":{"doc":"This is a little helper for routing small units of work to …","t":"DLLLLLFFFFFLLL","n":["Runtime","borrow","borrow_mut","from","into","new","rt_spawn","rt_spawn_non_blocking","spawn","spawn_blocking","spawn_local","try_from","try_into","type_id"],"q":[[0,"kumo_server_runtime"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Schedule func to run in the runtime pool. func must return …","","Spawn a future as a task with a name.","","Spawn a local future as a task with a name.","","",""],"i":[0,1,1,1,1,1,0,0,0,0,0,1,1,1],"f":[0,[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[3,[0,[4,5]]],[[2,[6]]]],[[3,[0,[4,5]]],2],[[[8,[7]],[0,[9,5]]],[[10,[6]]]],[[[8,[7]],[0,[4,5]]],[[10,[[6,[5]]]]]],[[[8,[7]],9],[[10,[6]]]],[[],11],[[],11],[[],12]],"c":[],"p":[[3,"Runtime"],[6,"Result"],[3,"String"],[8,"FnOnce"],[8,"Send"],[3,"JoinHandle"],[15,"str"],[8,"AsRef"],[8,"Future"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"lruttl":{"doc":"","t":"DLLLLLLLLLLL","n":["LruCacheWithTtl","borrow","borrow_mut","from","get","get_with_expiry","insert","into","new","try_from","try_into","type_id"],"q":[[0,"lruttl"]],"d":["","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6],"f":[0,[[]],[[]],[[]],[[[6,[[4,[[0,[1,2,3]]]],[0,[1,2]],5]],[0,[1,2,3]]],[[7,[5]]]],[[[6,[[4,[[0,[1,2,3]]]],[0,[1,2]],5]],[0,[1,2,3]]],7],[[[6,[[0,[1,2]],5]],[0,[1,2]],5,8],5],[[]],[9,[[6,[[0,[1,2]],5]]]],[[],10],[[],10],[[],11]],"c":[],"p":[[8,"Hash"],[8,"Eq"],[8,"Sized"],[8,"Borrow"],[8,"Clone"],[3,"LruCacheWithTtl"],[4,"Option"],[3,"Instant"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"maildir":{"doc":"","t":"NNNNDDEDDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChronoError","DateError","IOError","Io","MailEntries","MailEntry","MailEntryError","Maildir","MaildirEntries","MaildirError","ParseError","Time","Utf8","add_flags","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","copy_to","count_cur","count_new","create_dirs","date","delete","find","flags","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","headers","id","into","into","into","into","into","into","into_iter","into_iter","is_draft","is_flagged","is_passed","is_replied","is_seen","is_trashed","list_cur","list_new","list_subdirs","move_new_to_cur","move_new_to_cur_with_flags","move_to","next","next","parsed","path","path","provide","provide","received","remove_flags","set_flags","source","source","store_cur_with_flags","store_new","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"maildir"]],"d":["","","","","An iterator over the email messages in a particular …","This struct represents a single email message inside the …","","The main entry point for this library. This struct can be …","An iterator over the maildir subdirectories. This iterator …","","","","","Adds the given flags to the message with the given id in …","","","","","","","","","","","","","Copies a message from the current maildir to the targetted …","Returns the number of messages found inside the <code>cur</code> …","Returns the number of messages found inside the <code>new</code> …","Creates all neccessary directories if they don’t exist …","","Deletes the message with the given id in the maildir. This …","Tries to find the message with the given id in the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns an iterator over the messages inside the <code>cur</code> …","Returns an iterator over the messages inside the <code>new</code> …","Returns an iterator over the maildir subdirectories. The …","Moves a message from the <code>new</code> maildir folder to the <code>cur</code> …","Moves a message from the <code>new</code> maildir folder to the <code>cur</code> …","Moves a message from the current maildir to the targetted …","","","","","Returns the path of the maildir base folder.","","","","Removes the given flags to the message with the given id …","Updates the flags for the message with the given id in the …","","","Stores the given message data as a new message file in the …","Stores the given message data as a new message file in the …","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[8,8,8,13,0,0,0,0,0,0,8,13,13,1,5,23,24,1,8,13,5,23,24,1,8,13,1,1,1,1,5,1,1,5,8,8,13,13,5,23,24,1,1,1,1,8,8,8,8,8,13,13,13,13,5,5,5,23,24,1,8,13,23,24,5,5,5,5,5,5,1,1,1,1,1,1,23,24,5,5,1,8,13,5,1,1,8,13,1,1,8,13,5,23,24,1,8,13,5,23,24,1,8,13,5,23,24,1,8,13,5,23,24,1,8,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,1],3],[1,4],[1,4],[1,3],[5,[[9,[[7,[6]],8]]]],[[1,2],3],[[1,2],[[10,[5]]]],[5,2],[[8,11],12],[[8,11],12],[[13,11],12],[[13,11],12],[[]],[[]],[[]],[14,1],[[]],[15,1],[2,1],[16,8],[[]],[17,8],[2,8],[18,8],[16,13],[19,13],[20,13],[[]],[5,[[9,[21,8]]]],[5,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,22],[5,22],[5,22],[5,22],[5,22],[5,22],[1,23],[1,23],[1,24],[[1,2],3],[[1,2,2],3],[[1,2,1],3],[23,[[10,[[3,[5]]]]]],[24,[[10,[[3,[1]]]]]],[5,[[9,[25,8]]]],[5,14],[1,26],[27],[27],[5,[[9,[[7,[6]],8]]]],[[1,2,2],3],[[1,2,2],3],[8,[[10,[28]]]],[13,[[10,[28]]]],[[1,[30,[29]],2],[[9,[15,13]]]],[[1,[30,[29]]],[[9,[15,13]]]],[[],15],[[],15],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"Maildir"],[15,"str"],[6,"Result"],[15,"usize"],[3,"MailEntry"],[3,"FixedOffset"],[3,"DateTime"],[4,"MailEntryError"],[4,"Result"],[4,"Option"],[3,"Formatter"],[6,"Result"],[4,"MaildirError"],[3,"PathBuf"],[3,"String"],[3,"Error"],[3,"ParseError"],[4,"MailParsingError"],[3,"SystemTimeError"],[3,"Utf8Error"],[3,"HeaderMap"],[15,"bool"],[3,"MailEntries"],[3,"MaildirEntries"],[3,"MimePart"],[3,"Path"],[3,"Demand"],[8,"Error"],[15,"u8"],[15,"slice"],[3,"TypeId"]]},\
"mailparsing":{"doc":"","t":"DEDNDDDNNNNNNNEEENNINNDDNDNSSSSSEDNDDDDDDNSSSNNDNGNEDNNNNNMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLMLLLLLLLLLLLFFLMLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMM","n":["AddrSpec","Address","AddressList","Allow","AttachmentOptions","AuthenticationResult","AuthenticationResults","Base64","Binary","Binary","BodyParse","Borrowed","BuildError","ChronoError","ConformanceDisposition","ContentTransferEncoding","DecodedBody","Deny","EightBit","EncodeHeaderValue","Fix","Group","Header","HeaderMap","HeaderParse","HeaderParseResult","InvalidContentTransferEncoding","LINE_TOO_LONG","MISSING_COLON_VALUE","MISSING_DATE_HEADER","MISSING_MESSAGE_ID_HEADER","MISSING_MIME_VERSION","MailParsingError","Mailbox","Mailbox","MailboxList","MessageBuilder","MessageConformance","MessageID","MimeParameters","MimePart","MissingHeader","NAME_ENDS_WITH_SPACE","NEEDS_TRANSFER_ENCODING","NON_CANONICAL_LINE_ENDINGS","NotAscii","Owned","Parser","QuotedPrintable","Result","SevenBit","SharedString","SimplifiedStructure","Sliced","Text","UnknownMimeVersion","WriteMessageIOError","WriteMessageWtf","address","all","as_address_list","as_authentication_results","as_content_disposition","as_content_id","as_content_transfer_encoding","as_content_type","as_date","as_header","as_header","as_mailbox","as_mailbox_list","as_message_id","as_message_id_list","as_str","as_unstructured","assign","attach","attach_part","attachments","authentication_results","bcc","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","body","body_offset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cc","child_parts","child_parts_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comments","complement","conformance","contains","content_disposition","content_id","content_id","content_transfer_encoding","content_type","date","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","difference","domain","empty","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","encode_value","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_nom","from_str","from_str","get","get_first","get_first_mut","get_last","get_last_mut","get_name","get_raw_value","has_lone_cr_or_lf","headers","headers","headers","headers_mut","html","index","inline","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","is_multipart","is_text","iter","iter_named","iter_named_mut","iter_names","len","local_part","message_id","method","method_version","mime_version","name","new","new","new","new","new","new_binary","new_html","new_multipart","new_text","new_text_plain","new_unstructured","normalize_crlf","normalize_crlf_in_place","not","overall_conformance","parse","parse","parse","parse_address_list_header","parse_authentication_results_header","parse_content_id_header","parse_content_transfer_encoding_header","parse_content_type_header","parse_headers","parse_mailbox_header","parse_mailbox_list_header","parse_msg_id_header","parse_msg_id_header_list","parse_unstructured_header","prepend","props","provide","raw_body","reason","rebuild","rebuild","references","remove","remove","reply_to","resent_bcc","resent_cc","resent_from","resent_sender","resent_to","result","results","sender","serialize","serialize","serv_id","set","set","set_authentication_results","set_bcc","set_cc","set_comments","set_content_disposition","set_content_id","set_content_transfer_encoding","set_content_type","set_date","set_from","set_message_id","set_mime_version","set_references","set_reply_to","set_resent_bcc","set_resent_cc","set_resent_from","set_resent_sender","set_resent_to","set_sender","set_stable_content","set_subject","set_to","simplified_structure","slice","sub","sub_assign","subject","symmetric_difference","text","text_html","text_plain","to","to_header_string","to_message_string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","value","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_name_value","write_header","write_message","entries","name","other","range"],"q":[[0,"mailparsing"],[573,"mailparsing::Address"],[575,"mailparsing::SharedString"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","Represents an ordered list of headers. Note that there may …","","Holds the result of parsing a block of headers","","","","","","","","","","","","","","","","","","","","","","","","","","Helper for holding either an owned or borrowed string, and …","","","","","","","","Get a flags value with all known bits set.","","","","","","","","","","Parse the header into a mailbox (as defined in RFC 5322), …","Parse the header into a mailbox-list (as defined in RFC …","","","","","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Decode transfer decoding and return the body","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtain a reference to the child parts","Obtain a mutable reference to the child parts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","","","","","","","","","","","","","","","","","","","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","","Retrieve the value for a named parameter. This method will …","","","","","","","","Obtains a reference to the headers","","","Obtain a mutable reference to the headers","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","","Yield a set of contained flags values.","","","Yield a set of contained named flags values.","","","","","","","","","","","","","","","","Constructs a new part with textual utf8 content. …","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","Parse some data into a tree of MimeParts","","","","","","","","","","","","","","","","Get the raw, transfer-encoded body","","Re-constitute the header. The header value will be parsed …","Re-constitute the message. Each element will be parsed …","","The intersection of a source flags value with the …","Remove the named parameter","","","","","","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","Returns a SimplifiedStructure representation of the mime …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","Convenience method wrapping write_header that returns the …","Convenience method wrapping write_message that returns the …","","","","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","Format the header into the provided output stream, as …","Write the message content to the provided output stream","","","",""],"i":[0,0,0,27,0,0,0,29,29,24,25,15,25,25,0,0,0,27,29,0,27,32,0,0,25,0,25,1,1,1,1,1,0,0,32,0,0,0,0,0,0,25,1,1,1,25,15,0,29,0,29,0,0,15,24,25,25,25,12,1,2,2,2,2,2,2,2,17,17,2,2,2,2,15,2,2,18,18,28,23,23,1,1,1,1,1,1,1,1,22,46,46,53,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,46,53,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,18,23,22,22,15,27,25,1,2,23,22,28,21,29,5,30,31,32,3,13,12,7,6,15,27,25,1,2,23,22,28,21,29,5,30,31,32,3,13,12,7,6,23,1,22,1,23,23,21,23,23,23,18,27,1,23,15,18,23,18,23,27,5,30,1,31,1,17,5,31,32,3,13,12,7,6,15,15,25,1,2,23,22,21,29,24,5,30,31,32,3,13,12,7,6,1,29,5,30,31,32,3,13,12,7,6,1,21,15,15,27,25,25,1,1,1,1,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,46,53,15,15,15,18,27,25,1,2,23,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,1,1,1,1,1,1,25,1,29,6,23,23,23,23,2,2,0,22,46,28,22,28,15,21,1,1,1,46,53,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,1,1,1,6,6,1,23,23,1,15,31,23,30,30,23,12,18,2,23,31,6,22,22,22,22,22,2,0,0,1,46,2,22,31,53,53,53,53,53,2,53,53,53,53,53,23,30,25,22,30,2,22,23,1,6,23,23,23,23,23,23,30,5,23,5,30,5,1,6,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,18,23,23,22,15,1,1,23,1,28,18,18,23,2,22,15,27,25,1,2,23,22,28,21,29,5,30,31,32,3,13,12,7,6,15,25,1,1,46,53,15,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,46,53,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,46,53,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,1,6,5,46,53,15,18,27,25,1,2,23,22,28,21,29,24,5,30,31,32,3,13,12,7,6,2,2,22,54,54,55,55],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,[[4,[3]]]],[2,[[4,[5]]]],[2,[[4,[6]]]],[2,[[4,[7]]]],[2,[[4,[6]]]],[2,[[4,[6]]]],[2,[[4,[[9,[8]]]]]],[10,[[11,[2]]]],[10,[[11,[2]]]],[2,[[4,[12]]]],[2,[[4,[13]]]],[2,[[4,[7]]]],[2,[[4,[[14,[7]]]]]],[15,10],[2,[[4,[16]]]],[[2,17]],[[18,10,[20,[19]],[11,[21]]]],[[18,22]],0,[23,[[4,[[11,[5]]]]]],[23,[[4,[[11,[3]]]]]],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,19],[1,19],[[1,1],1],[[1,1]],[22,[[4,[24]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[26,[22,25]]]],[23,[[4,[[11,[3]]]]]],[22,[[20,[22]]]],[22,[[14,[22]]]],[15,15],[27,27],[25,25],[1,1],[2,2],[23,23],[22,22],[28,28],[21,21],[29,29],[5,5],[30,30],[31,31],[32,32],[3,3],[13,13],[12,12],[7,7],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[4,[[11,[16]]]]]],[1,1],[22,1],[[1,1],33],[23,[[4,[[11,[6]]]]]],[23,[[4,[[11,[7]]]]]],0,[23,[[4,[[11,[6]]]]]],[23,[[4,[[11,[6]]]]]],[23,[[4,[[11,[[9,[8]]]]]]]],[[],18],[[],27],[[],1],[[],23],[15,10],[18,23],[23,[[14,[2]]]],[18,23],[23,[[14,[2]]]],[34,[[26,[27]]]],[34,[[26,[5]]]],[34,[[26,[30]]]],[[1,1],1],0,[[],1],[[],15],[5,15],[31,15],[32,15],[3,15],[13,15],[12,15],[7,15],[6,15],[[15,10],33],[[15,15],33],[[25,25],33],[[1,1],33],[[2,2],33],[[23,23],33],[[22,22],33],[[21,21],33],[[29,29],33],[[24,24],33],[[5,5],33],[[30,30],33],[[31,31],33],[[32,32],33],[[3,3],33],[[13,13],33],[[12,12],33],[[7,7],33],[[6,6],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[1,35]],0,[[15,36],37],[[15,36],37],[[27,36],37],[[25,36],37],[[25,36],37],[[1,36],37],[[1,36],37],[[1,36],37],[[1,36],37],[[1,36],37],[[2,36],37],[[23,36],37],[[22,36],37],[[28,36],37],[[21,36],37],[[29,36],37],[[24,36],37],[[5,36],37],[[30,36],37],[[31,36],37],[[32,36],37],[[3,36],37],[[13,36],37],[[12,36],37],[[7,36],37],[[6,36],37],[[]],[[]],[16,15],[10,15],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[4,[[11,[13]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[11,[1]]]],[19,1],[19,1],[19,1],[35,1],[10,[[11,[1]]]],[[[38,[10]],[39,[[0,[[38,[10]]]]]]],25],[10,[[26,[1,16]]]],[10,[[4,[29]]]],[[6,10],[[11,[16]]]],[[23,10],[[11,[2]]]],[[23,10],[[11,[2]]]],[[23,10],[[11,[2]]]],[[23,10],[[11,[2]]]],[2,10],[2,10],[[[20,[19]]],33],[22,23],0,0,[22,23],0,[[15,40],19],0,[[1,1]],[[1,1],1],[[1,1],33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1,33],[1,33],[6,33],[6,33],[1,[[41,[1]]]],[[23,10],42],[[23,10],42],[1,[[43,[1]]]],[15,40],0,[23,[[4,[[11,[7]]]]]],0,0,[23,[[4,[[11,[16]]]]]],0,[[],18],[[[44,[15]],17],2],[[[14,[2]]],23],[[10,10],31],[10,6],[[10,[20,[19]],[11,[21]]],22],[10,22],[[10,[14,[22]],[11,[10]]],22],[[10,10],22],[10,22],[[[44,[15]],[44,[15]]],2],[[[20,[19]]],[[14,[19]]]],[[[14,[19]]]],[1,1],0,[[[44,[15]]],4],[[[45,[15]]],[[4,[22]]]],[10,[[4,[31]]]],[10,[[4,[3]]]],[10,[[4,[5]]]],[10,[[4,[7]]]],[10,[[4,[6]]]],[10,[[4,[6]]]],[[[45,[15]]],[[4,[46]]]],[10,[[4,[12]]]],[10,[[4,[13]]]],[10,[[4,[7]]]],[10,[[4,[[14,[7]]]]]],[10,[[4,[16]]]],[[23,10,[44,[15]]]],0,[47],[22,15],0,[2,[[4,[2]]]],[22,[[4,[22]]]],[23,[[4,[[11,[[14,[7]]]]]]]],[[1,1]],[[6,10]],[23,[[4,[[11,[3]]]]]],[23,[[4,[[11,[3]]]]]],[23,[[4,[[11,[3]]]]]],[23,[[4,[[11,[13]]]]]],[23,[[4,[[11,[12]]]]]],[23,[[4,[[11,[3]]]]]],0,0,[23,[[4,[[11,[12]]]]]],[[5,48],26],[[30,48],26],0,[[1,1,33]],[[6,10,10]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[23,17]],[[18,33]],[[23,17]],[[23,17]],[22,[[4,[28]]]],[[15,[49,[40]]],15],[[1,1],1],[[1,1]],[23,[[4,[[11,[16]]]]]],[[1,1],1],0,[[18,10]],[[18,10]],[23,[[4,[[11,[3]]]]]],[2,16],[22,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[1,16],[[1,1]],[[],26],[[],26],[[],26],[[[20,[19]]],[[26,[15]]]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[1,1],1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[15]],[44,[15]]],2],[[2,51],52],[[22,51],4],0,0,0,0],"c":[],"p":[[3,"MessageConformance"],[3,"Header"],[3,"AddressList"],[6,"Result"],[3,"AuthenticationResults"],[3,"MimeParameters"],[3,"MessageID"],[3,"FixedOffset"],[3,"DateTime"],[15,"str"],[4,"Option"],[3,"Mailbox"],[3,"MailboxList"],[3,"Vec"],[4,"SharedString"],[3,"String"],[8,"EncodeHeaderValue"],[3,"MessageBuilder"],[15,"u8"],[15,"slice"],[3,"AttachmentOptions"],[3,"MimePart"],[3,"HeaderMap"],[4,"DecodedBody"],[4,"MailParsingError"],[4,"Result"],[4,"ConformanceDisposition"],[3,"SimplifiedStructure"],[4,"ContentTransferEncoding"],[3,"AuthenticationResult"],[3,"AddrSpec"],[4,"Address"],[15,"bool"],[8,"Deserializer"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"LocatedSpan"],[4,"Err"],[15,"usize"],[3,"Iter"],[8,"DoubleEndedIterator"],[3,"IterNames"],[8,"Into"],[8,"TryInto"],[3,"HeaderParseResult"],[3,"Demand"],[8,"Serializer"],[3,"Range"],[3,"TypeId"],[8,"Write"],[6,"Result"],[3,"Parser"],[13,"Group"],[13,"Sliced"]]},\
"message":{"doc":"","t":"CCAAAANDDNDEDLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDEENNNDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLDSSSSDDSSSLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLMLLLLLLLLLLLLLLLLL","n":["EnvelopeAddress","Message","address","dkim","message","scheduling","Address","AddressGroup","EnvelopeAddress","Group","HeaderAddress","HeaderAddressEntry","HeaderAddressList","add_fields","add_fields","add_fields","add_methods","add_methods","add_methods","address","addresses","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","crack_address","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","domain","domain","domain","drop","drop","drop","drop","drop","email","email","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","flatten","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_lua","from_lua","from_lua","from_lua_multi","from_lua_multi","from_lua_multi","init","init","init","init","init","into","into","into","into","into","name","name","name","name","null_sender","parse","serialize","serialize","serialize","serialize","serialize","single_address","single_address_cracked","single_address_string","to_lua","to_lua","to_lua","to_lua_multi","to_lua_multi","to_lua_multi","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","user","user","user","vzip","vzip","vzip","vzip","vzip","CFSigner","Canon","HashAlgo","Relaxed","Sha1","Sha256","Signer","SignerConfig","Simple","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","from","from","from","from","from","from_lua","from_lua_multi","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","register","sign","to_lua","to_lua_multi","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Message","QueueNameComponents","add_methods","age","append_header","assign_data","borrow","borrow","borrow_mut","borrow_mut","campaign","check_fix_conformance","clone","clone_into","delay","delay_by","delay_by_and_jitter","delay_with_jitter","deref","deref","deref_mut","deref_mut","dkim_sign","dkim_verify","domain","drop","drop","fmt","fmt","format","from","from","from_lua","from_lua_multi","get_address_header","get_all_headers","get_all_named_header_values","get_data","get_due","get_first_named_header_value","get_meta","get_meta_obj","get_meta_string","get_num_attempts","get_queue_name","id","id","import_scheduling_header","import_x_headers","increment_num_attempts","init","init","into","into","is_data_loaded","is_meta_loaded","load_data","load_data_from","load_data_if_needed","load_meta","load_meta_from","load_meta_if_needed","needs_save","new_dirty","new_from_spool","new_with_id","parse","parse_rfc3464","parse_rfc5965","prepend_header","recipient","remove_all_named_headers","remove_first_named_header","remove_x_headers","retain_headers","routing_domain","save","save_to","sender","set_due","set_force_sync","set_meta","set_num_attempts","set_recipient","set_scheduling","set_sender","shrink","tenant","to_lua","to_lua_multi","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DaysOfWeek","FRI","MON","SAT","SUN","ScheduleRestriction","Scheduling","THU","TUE","WED","adjust_for_schedule","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","complement","contains","days_of_week","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","difference","drop","drop","drop","empty","end","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","erased_serialize","erased_serialize","erased_serialize","extend","first_attempt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_str","init","init","init","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","is_within_schedule","iter","iter_names","not","remove","restriction","serialize","serialize","serialize","set","start","sub","sub_assign","symmetric_difference","timezone","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","vzip","vzip","vzip"],"q":[[0,"message"],[6,"message::address"],[178,"message::dkim"],[290,"message::message"],[390,"message::scheduling"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the address list is comprised of a single entry, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flattens the groups and list and returns a simple list of …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the address list is comprised of a single entry, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the address list is comprised of a single entry, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Delay by requested duration, and add up to 1 minute of …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Retrieve <code>key</code> as a String.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new message with the supplied data. The message …","Helper for creating a message based on spool enumeration. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a restriction on when the message can be sent. …","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","","","","","","","","","","","The intersection of a source flags value with the …","","","","Get a flags value with all bits unset.","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","",""],"i":[0,0,0,0,0,0,6,0,0,6,0,0,0,1,3,4,1,3,4,4,7,1,3,6,4,7,1,3,6,4,7,1,3,6,4,7,1,3,6,4,7,4,1,3,6,4,7,1,3,6,4,7,1,3,6,4,7,1,3,4,1,3,6,4,7,3,4,1,3,6,4,7,1,1,1,1,3,3,3,3,6,6,6,6,4,4,4,4,7,7,7,7,1,3,6,4,7,3,1,3,6,4,7,1,3,3,6,6,4,4,7,1,3,4,1,3,4,1,3,6,4,7,1,3,6,4,7,3,4,4,7,1,1,1,3,6,4,7,3,3,3,1,3,4,1,3,4,1,3,6,4,7,1,1,3,6,4,7,1,1,1,3,6,4,7,1,3,6,4,7,1,3,4,1,3,6,4,7,0,0,0,33,34,34,0,0,33,74,33,34,35,36,74,33,34,35,36,33,34,35,36,33,34,35,36,33,74,33,34,35,36,74,33,34,35,36,33,34,35,74,33,34,35,36,33,34,35,33,33,33,33,34,34,34,34,35,35,35,35,74,33,34,35,36,36,36,33,34,35,33,34,35,74,33,34,35,36,74,33,34,35,36,0,36,36,36,33,34,35,36,74,33,34,35,36,74,33,34,35,36,74,33,34,35,36,74,33,34,35,36,0,0,44,44,44,44,44,52,44,52,52,44,44,44,44,44,44,44,44,52,44,52,44,44,52,44,52,44,52,52,44,52,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,52,44,52,44,44,44,44,44,44,44,44,44,44,44,44,52,44,44,44,44,44,44,44,44,52,44,44,44,44,44,44,44,44,44,44,44,52,44,44,44,52,44,52,44,52,44,52,44,52,0,68,68,68,68,0,0,68,68,68,67,68,68,68,68,68,68,68,68,68,68,69,67,68,69,67,68,69,67,68,69,67,68,68,69,68,69,67,68,69,67,68,69,67,68,68,69,67,68,69,68,69,67,68,68,68,68,68,69,67,68,67,68,68,68,68,68,69,67,68,68,69,67,68,68,68,68,68,68,68,68,69,67,68,68,68,68,69,67,68,68,68,67,68,68,68,68,67,68,69,67,68,69,68,68,68,69,68,69,67,68,68,69,67,68,69,67,68,69,67,68,68,69,67],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]]],[[[2,[3]]]],[[[2,[4]]]],[[[5,[1]]]],[[[5,[3]]]],[[[5,[4]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[3,3],[6,6],[4,4],[7,7],[[]],[[]],[[]],[[]],[[]],[4,8],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[10,[[11,[1]]]],[10,[[11,[3]]]],[10,[[11,[6]]]],[10,[[11,[4]]]],[10,[[11,[7]]]],[1,12],[3,[[8,[12]]]],[4,[[8,[12]]]],[9],[9],[9],[9],[9],[3,[[8,[[13,[12]]]]]],[4,[[13,[12]]]],[[1,1],14],[[3,3],14],[[6,6],14],[[4,4],14],[[7,7],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[15,[[11,[16,17]]]],[15,[[11,[16,17]]]],[15,[[11,[16,17]]]],[15,[[11,[16,17]]]],[15,[[11,[16,17]]]],[3,[[18,[4]]]],[[1,19],20],[[3,19],20],[[6,19],20],[[4,19],20],[[7,19],20],[[]],[21,3],[[]],[[]],[22,6],[23,4],[[]],[[]],[[24,25],[[11,[26]]]],[[24,25],[[11,[26]]]],[[24,25],[[11,[26]]]],[[27,25],[[11,[26]]]],[[27,25],[[11,[26]]]],[[27,25],[[11,[26]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[3,[[8,[[13,[12]]]]]],[4,[[13,[12]]]],0,0,[[],1],[12,[[8,[1]]]],[[1,28],11],[[3,28],11],[[6,28],11],[[4,28],11],[[7,28],11],[3,[[8,[4]]]],[3,8],[3,[[8,[12]]]],[25,[[11,[24,26]]]],[25,[[11,[24,26]]]],[25,[[11,[24,26]]]],[25,[[11,[27,26]]]],[25,[[11,[27,26]]]],[25,[[11,[27,26]]]],[[]],[[]],[[]],[[]],[[]],[1,29],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[1,[[11,[30]]]],[1,[[11,[31]]]],[[],11],[[],11],[[],11],[[],11],[[],32],[[],32],[[],32],[[],32],[[],32],[1,12],[3,[[8,[12]]]],[4,[[8,[12]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[[]],[[]],[[]],[[]],[[],33],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[10,[[11,[33]]]],[10,[[11,[34]]]],[10,[[11,[35]]]],[9],[9],[9],[9],[9],[[33,33],14],[[34,34],14],[[35,35],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[24,25],[[11,[26]]]],[[27,25],[[11,[26]]]],[[[0,[37,38]],39],40],[[[0,[37,38]],39],40],[[[0,[37,38]],39],40],[[33,41]],[[34,41]],[[35,41]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[25,8],[[36,[43,[42]]],[[8,[29]]]],[25,[[11,[24,26]]]],[25,[[11,[27,26]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],0,0,[[[5,[44]]]],[[44,[46,[45]]],47],[[44,[13,[12]],12]],[[44,[18,[42]]]],[[]],[[]],[[]],[[]],0,[[44,48,48],8],[44,44],[[]],[44,49],[[44,47],8],[[44,47],8],[[44,50],8],[9],[9],[9],[9],[[44,36],8],[44,[[8,[[18,[51]]]]]],0,[9],[9],[[44,19],20],[[52,19],20],[[[13,[[53,[12]]]],[13,[[53,[12]]]],[53,[12]],[13,[[53,[12]]]]],29],[[]],[[]],[[24,25],[[11,[26]]]],[[27,25],[[11,[26]]]],[[44,12],[[8,[[13,[3]]]]]],[44,[[8,[18]]]],[[44,12],[[8,[[18,[29]]]]]],[44,[[55,[[54,[[43,[42]]]]]]]],[44,[[13,[[46,[45]]]]]],[[44,12],[[8,[[13,[29]]]]]],[[44,56],[[8,[57]]]],[44,[[8,[57]]]],[[44,[0,[56,58,59]]],[[8,[[13,[29]]]]]],[44,60],[44,[[8,[29]]]],[44],[44,61],[[44,12,14],8],[[44,[18,[29]]],8],[44],[[],9],[[],9],[[]],[[]],[44,14],[44,14],[44,8],[[44,62],8],[44,8],[44,8],[[44,62],8],[44,8],[44,14],[[61,1,1,57,[55,[[54,[[43,[42]]]]]]],[[8,[44]]]],[[61,[18,[42]]],[[8,[44]]]],[61,[[8,[44]]]],[12,52],[44,[[8,[[13,[63]]]]]],[44,[[8,[[13,[64]]]]]],[[44,[13,[12]],12]],[44,[[8,[1]]]],[[44,12],8],[[44,12],8],[[44,[18,[29]]],8],[[44,65],8],0,[44,8],[[44,62,62],8],[44,[[8,[1]]]],[[44,[13,[[46,[45]]]]],8],[[44,14]],[[44,[53,[12]],[66,[57]]],8],[[44,60]],[[44,1],8],[[44,[13,[67]]],8],[[44,1],8],[44,[[8,[14]]]],0,[25,[[11,[24,26]]]],[25,[[11,[27,26]]]],[[]],[52,29],[[],11],[[],11],[[],11],[[],11],[[],32],[[],32],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[67,[46,[45]]],[[46,[45]]]],[[],68],[[68,68],68],[[68,68]],[[68,68],68],[[68,68]],[68,42],[68,42],[[68,68],68],[[68,68]],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[69,69],[67,67],[[]],[[]],[[]],[68,68],[[68,68],14],0,[9],[9],[9],[9],[9],[9],[10,[[11,[68]]]],[10,[[11,[69]]]],[10,[[11,[67]]]],[[68,68],68],[9],[9],[9],[[],68],0,[[68,68],14],[[69,69],14],[[67,67],14],[[],14],[[],14],[[],14],[[],14],[15,[[11,[16,17]]]],[15,[[11,[16,17]]]],[15,[[11,[16,17]]]],[[68,70]],0,[[68,19],20],[[68,19],20],[[68,19],20],[[68,19],20],[[68,19],20],[[69,19],20],[[67,19],20],[[]],[71,68],[[]],[[]],[42,[[13,[68]]]],[42,68],[42,68],[42,68],[70,68],[12,[[13,[68]]]],[12,[[11,[68,29]]]],[[],9],[[],9],[[],9],[[68,68]],[[68,68],68],[[68,68],14],[[]],[[]],[[]],[68],[68,14],[68,14],[[67,[46,[45]]],14],[68,[[72,[68]]]],[68,[[73,[68]]]],[68,68],[[68,68]],0,[[68,28],11],[[69,28],11],[[67,28],11],[[68,68,14]],0,[[68,68],68],[[68,68]],[[68,68],68],0,[[]],[[]],[[]],[[68,68]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],32],[[],32],[[],32],[[68,68],68],[[]],[[]],[[]]],"c":[],"p":[[3,"EnvelopeAddress"],[8,"UserDataFields"],[3,"HeaderAddressList"],[3,"HeaderAddress"],[8,"UserDataMethods"],[4,"HeaderAddressEntry"],[3,"AddressGroup"],[6,"Result"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[15,"str"],[4,"Option"],[15,"bool"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"AddressList"],[4,"Address"],[3,"Mailbox"],[4,"Value"],[3,"Lua"],[4,"Error"],[3,"MultiValue"],[8,"Serializer"],[3,"String"],[4,"ReversePath"],[4,"ForwardPath"],[3,"TypeId"],[4,"Canon"],[4,"HashAlgo"],[3,"SignerConfig"],[3,"Signer"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[15,"u8"],[15,"slice"],[3,"Message"],[3,"Utc"],[3,"DateTime"],[3,"Duration"],[3,"MessageConformance"],[3,"Duration"],[15,"i64"],[3,"AuthenticationResult"],[3,"QueueNameComponents"],[8,"AsRef"],[3,"Box"],[3,"Arc"],[8,"Index"],[4,"Value"],[8,"Display"],[8,"Copy"],[15,"u16"],[3,"SpoolId"],[8,"Spool"],[3,"Report"],[3,"ARFReport"],[8,"FnMut"],[8,"Into"],[3,"Scheduling"],[3,"DaysOfWeek"],[3,"ScheduleRestriction"],[8,"IntoIterator"],[4,"Weekday"],[3,"Iter"],[3,"IterNames"],[3,"CFSigner"]]},\
"mod_amqp":{"doc":"","t":"F","n":["register"],"q":[[0,"mod_amqp"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"Lua"],[6,"Result"]]},\
"mod_digest":{"doc":"","t":"F","n":["register"],"q":[[0,"mod_digest"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"Lua"],[6,"Result"]]},\
"mod_dns_resolver":{"doc":"","t":"F","n":["register"],"q":[[0,"mod_dns_resolver"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"Lua"],[6,"Result"]]},\
"mod_encode":{"doc":"","t":"F","n":["register"],"q":[[0,"mod_encode"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"Lua"],[6,"Result"]]},\
"mod_http":{"doc":"","t":"DLLLLLLLLLLLLLLFLLLL","n":["FilePart","borrow","borrow_mut","clone","clone_into","deserialize","eq","equivalent","equivalent","equivalent","fmt","from","get_hash","hash","into","register","to_owned","try_from","try_into","type_id"],"q":[[0,"mod_http"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[2,[[3,[1]]]],[[1,1],4],[[],4],[[],4],[[],4],[[1,5],6],[[]],[[[0,[7,8]],9],10],[[1,11]],[[]],[12,13],[[]],[[],3],[[],3],[[],14]],"c":[],"p":[[3,"FilePart"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[3,"Lua"],[6,"Result"],[3,"TypeId"]]},\
"mod_kafka":{"doc":"","t":"F","n":["register"],"q":[[0,"mod_kafka"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"Lua"],[6,"Result"]]},\
"mod_memoize":{"doc":"","t":"ENNEDDNNNLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLLLLLMLLLLLLLLMLLLL","n":["CacheValue","Integer","Json","MapKey","MemoizeParams","Memoized","Memoized","String","Table","as_lua","as_lua","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","eq","eq","eq","eq","equivalent","equivalent","erased_serialize","fmt","from","from","from","from","from_lua","from_lua","from_lua_multi","from_lua_multi","get_hash","hash","impl_memoize","into","into","into","into","name","register","serialize","to_lua","to_lua","to_lua_multi","to_lua_multi","to_owned","to_owned","to_owned","to_owned","to_value","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","type_id","type_id","type_id","type_id"],"q":[[0,"mod_memoize"]],"d":["","","","","","Memoized is a helper type that allows native Rust types to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Call this from your <code>UserData::add_methods</code> implementation to","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,5,0,0,0,5,1,5,1,5,6,7,1,5,6,7,1,5,7,6,7,1,5,6,7,1,5,7,6,7,1,5,7,1,7,7,6,7,1,5,6,5,6,5,1,1,6,6,7,1,5,7,0,7,6,5,6,5,6,7,1,5,6,6,7,1,5,6,7,1,5,7,6,7,1,5],"f":[0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,6],[7,7],[1,1],[5,5],[[]],[[]],[[]],[[]],[8,[[9,[7]]]],[[6,6],10],[[7,7],10],[[1,1],10],[[5,5],10],[[],10],[[],10],[11,[[9,[12,13]]]],[[7,14],15],[[]],[[]],[[]],[[]],[[3,2],[[9,[16]]]],[[3,2],[[4,[5]]]],[[17,2],[[9,[16]]]],[[17,2],[[9,[16]]]],[[[0,[18,19]],20],21],[[1,22]],[[[27,[[0,[23,24,25,26]]]]]],[[]],[[]],[[]],[[]],0,[2,28],[[7,29],9],[2,[[9,[3,16]]]],[[5,2],[[4,[3]]]],[2,[[9,[17,16]]]],[2,[[9,[17,16]]]],[[]],[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],30],[[],30],[[],30],[[],30]],"c":[],"p":[[4,"MapKey"],[3,"Lua"],[4,"Value"],[6,"Result"],[4,"CacheValue"],[3,"Memoized"],[3,"MemoizeParams"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[3,"Formatter"],[6,"Result"],[4,"Error"],[3,"MultiValue"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[8,"UserData"],[8,"Send"],[8,"Sync"],[8,"Clone"],[8,"UserDataMethods"],[6,"Result"],[8,"Serializer"],[3,"TypeId"]]},\
"mod_redis":{"doc":"","t":"NENNNDENINNENDDDEDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLMLLLLLLLLMLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLL","n":["Bulk","ClientWrapper","Cluster","Cluster","Cluster","Cmd","ConnectionWrapper","Data","FromRedisValue","Int","Nil","NodeSpec","Okay","RedisConnKey","RedisConnection","RedisError","RedisValue","Script","ScriptInvocation","Single","Single","Single","Status","acl_cat","acl_cat_categoryname","acl_deluser","acl_genpass","acl_genpass_bits","acl_getuser","acl_help","acl_list","acl_load","acl_log","acl_log_reset","acl_save","acl_setuser","acl_setuser_rules","acl_users","acl_whoami","add_methods","append","arg","arg","arg","args_iter","as_map_iter","as_sequence","bit_and","bit_not","bit_or","bit_xor","bitcount","bitcount_range","blmove","blmpop","blpop","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brpop","brpoplpush","build_client","build_cmd","category","cause","check_connection","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","code","connect","connect_blocking","cursor_arg","decr","default","del","description","deserialize","deserialize","detail","eq","eq","eq","eq","equivalent","equivalent","equivalent","execute","exists","expire","expire_at","extension_error_code","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_vec","from_lua","from_lua_multi","from_redis_value","from_redis_value","from_redis_values","geo_add","geo_dist","geo_hash","geo_pos","geo_radius","geo_radius_by_member","get","get_db","get_del","get_ex","get_hash","get_hash","get_hash","get_packed_command","get_pool","getbit","getrange","getset","has_broken","hash","hash","hdel","hexists","hget","hgetall","hincr","hkeys","hlen","hset","hset_multiple","hset_nx","hvals","in_scan_mode","incr","into","into","into","into","into","into","into","into","into","into","invoke","invoke","invoke_blocking","invoke_script","is_cluster_error","is_connection_dropped","is_connection_refusal","is_io_error","is_open","is_timeout","is_valid","iter","key","key","keys","kind","lindex","linsert_after","linsert_before","llen","lmove","lmpop","load","looks_like_cursor","lpop","lpos","lpush","lpush_exists","lrange","lrem","lset","ltrim","mget","mset_nx","new","new","node","object_encoding","object_freq","object_idletime","object_refcount","open","open_blocking","password","persist","pexpire","pexpire_at","pfadd","pfcount","pfmerge","pool_size","prepare_invoke","provide","pset_ex","pttl","publish","query","query","query_blocking","read_from_replicas","redirect_node","register","rename","rename_nx","req_command","req_packed_command","req_packed_commands","rpop","rpoplpush","rpush","rpush_exists","sadd","scard","sdiff","sdiffstore","set","set_ex","set_multiple","set_nx","setbit","setrange","sinter","sinterstore","sismember","smembers","smove","spop","srandmember","srandmember_multiple","srem","strlen","sunion","sunionstore","test","to_lua","to_lua_err","to_lua_multi","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlink","username","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_arg","write_arg_fmt","xack","xadd","xadd_map","xadd_maxlen","xadd_maxlen_map","xclaim","xclaim_options","xdel","xgroup_create","xgroup_create_mkstream","xgroup_delconsumer","xgroup_destroy","xgroup_setid","xinfo_consumers","xinfo_groups","xinfo_stream","xlen","xpending","xpending_consumer_count","xpending_count","xrange","xrange_all","xrange_count","xread","xread_options","xrevrange","xrevrange_all","xrevrange_count","xtrim","zadd","zadd_multiple","zcard","zcount","zincr","zinterstore","zinterstore_max","zinterstore_max_weights","zinterstore_min","zinterstore_min_weights","zinterstore_weights","zlexcount","zmpop_max","zmpop_min","zpopmax","zpopmin","zrandmember","zrandmember_withscores","zrange","zrange_withscores","zrangebylex","zrangebylex_limit","zrangebyscore","zrangebyscore_limit","zrangebyscore_limit_withscores","zrangebyscore_withscores","zrank","zrem","zrembylex","zrembyscore","zremrangebyrank","zrevrange","zrevrange_withscores","zrevrangebylex","zrevrangebylex_limit","zrevrangebyscore","zrevrangebyscore_limit","zrevrangebyscore_limit_withscores","zrevrangebyscore_withscores","zrevrank","zscore","zscore_multiple","zunionstore","zunionstore_max","zunionstore_max_weights","zunionstore_min","zunionstore_min_weights","zunionstore_weights","RedisServer","borrow","borrow_mut","connection","from","into","spawn","try_from","try_into","type_id","vzip"],"q":[[0,"mod_redis"],[417,"mod_redis::test"]],"d":["A bulk response of more data.  This is generally used by …","","","","List of redis URLs for hosts in the cluster","Represents redis commands.","","An arbitary binary data.","This trait is used to convert a redis value into a more …","An integer response.  Note that there are a few situations …","A nil response from the server.","","A status response which represents the string “OK”.","","","Represents a redis error.  For the most part you should be …","Internal low-level redis value enum.","Represents a lua script.","Represents a prepared script call.","","","A single, non-clustered redis node","A status response.","Shows the available ACL categories.","Shows all the Redis commands in the specified category.","Delete all the specified ACL users and terminate all the …","Generates a 256-bits password starting from /dev/urandom …","Generates a 1-to-1024-bits password starting from …","Returns all the rules defined for an existing ACL user.","Returns a helpful text describing the different …","Shows the currently active ACL rules in the Redis server.","When Redis is configured to use an ACL file (with the …","Shows a list of recent ACL security events","Clears the ACL log.","When Redis is configured to use an ACL file (with the …","Creates an ACL user without any privilege.","Creates an ACL user with the specified rules or modify the …","Shows a list of all the usernames of the currently …","Returns the username the current connection is …","","Append a value to a key.","Adds a regular argument to the invocation.  This ends up …","Appends an argument to the command.  The argument passed …","Creates a script invocation object with an argument filled …","Returns an iterator over the arguments in this command …","Returns an iterator of <code>(&amp;Value, &amp;Value)</code> if <code>self</code> is …","Returns an <code>&amp;[Value]</code> if <code>self</code> is compatible with a sequence …","Perform a bitwise AND between multiple keys (containing …","Perform a bitwise NOT of the key (containing string values)","Perform a bitwise OR between multiple keys (containing …","Perform a bitwise XOR between multiple keys (containing …","Count set bits in a string.","Count set bits in a string in a range.","Pop an element from a list, push it to another list and …","Pops <code>count</code> elements from the first non-empty list key from …","Remove and get the first element in a list, or block until …","","","","","","","","","","","","","","","","","","","","","Remove and get the last element in a list, or block until …","Pop a value from a list, push it to another list and …","","","Returns the name of the error category for display …","","","","","","","","","","","","","","","Shortcut function to creating a command with a single …","Returns the raw error code if available.","","","Works similar to <code>arg</code> but adds a cursor argument.  This is …","Decrement the numeric value of a key by the given amount.","","Delete one or more keys.","","","","Returns the error detail.","","","","","","","","This is a shortcut to <code>query()</code> that does not return a value …","Determine if a key exists.","Set a key’s time to live in seconds.","Set the expiration for a key as a UNIX timestamp.","Returns the extension error code.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert bytes to a single element vector.","","","Given a redis <code>Value</code> this attempts to convert it into the …","","Similar to <code>from_redis_value</code> but constructs a vector of …","Adds the specified geospatial items to the specified key.","Return the distance between two members in the geospatial …","Return valid Geohash strings representing the position of …","Return the positions of all the specified members of the …","Return the members of a sorted set populated with …","Retrieve members selected by distance with the center of …","Get the value of a key.  If key is a vec this becomes an …","","Get the value of a key and delete it","Get the value of a key and set expiration","","","Returns the script’s SHA1 hash in hexadecimal format.","Returns the packed command as a byte vector.","","Returns the bit value at offset in the string value stored …","Get a range of bytes/substring from the value of a key. …","Set the string value of a key and return its old value.","","","","Deletes a single (or multiple) fields from a hash.","Checks if a field in a hash exists.","Gets a single (or multiple) fields from a hash.","Gets all the fields and values in a hash.","Increments a value.","Gets all the keys in a hash.","Gets the length of a hash.","Sets a single field in a hash.","Sets a multiple fields in a hash.","Sets a single field in a hash if it does not exist.","Gets all the values in a hash.","Returns true if the command is in scan mode.","Increment the numeric value of a key by the given amount.  …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invokes the script and returns the result.","Invokes the script directly without arguments.","","","Indicates that this is a cluster error.","Returns true if error was caused by a dropped connection.","Returns true if this error indicates that the connection …","Indicates that this failure is an IO failure.","","Returns true if error was caused by I/O time out. Note …","","Similar to <code>query()</code> but returns an iterator over the items …","Adds a key argument to the invocation.  This ends up as …","Creates a script invocation object with a key filled in.","Gets all keys matching pattern","Returns the kind of the error.","Get an element from a list by its index.","Insert an element after another element in a list.","Insert an element before another element in a list.","Returns the length of the list stored at key.","Pop an element a list, push it to another list and return …","Pops <code>count</code> elements from the first non-empty list key from …","Loads the script and returns the SHA1 of it.","Checks if the return value looks like it fulfils the cursor","Removes and returns the up to <code>count</code> first elements of the …","Returns the index of the first matching value of the list …","Insert all the specified values at the head of the list …","Inserts a value at the head of the list stored at key, …","Returns the specified elements of the list stored at key.","Removes the first count occurrences of elements equal to …","Sets the list element at index to value","Trim an existing list so that it will contain only the …","Get values of keys","Sets multiple keys to their values failing if at least one …","Creates a new empty command.","Creates a new script object.","","Returns the encoding of a key.","Returns the logarithmic access frequency counter of a key.","Returns the time in seconds since the last access of a key.","Returns the reference count of a key.","","","","Remove the expiration from a key.","Set a key’s time to live in milliseconds.","Set the expiration for a key as a UNIX timestamp in …","Adds the specified elements to the specified HyperLogLog.","Return the approximated cardinality of the set(s) observed …","Merge N different HyperLogLogs into a single one.","Maximum number of connections managed by the pool. Default …","Returns an empty script invocation object.  This is …","","Set the value and expiration in milliseconds of a key.","Get the expiration time of a key in milliseconds.","Posts a message to the given channel.","","Sends the command as query to the connection and converts …","","Enables reading from replicas for all new connections","Returns the node the error refers to.","","Rename a key.","Rename a key, only if the new key does not exist.","","","","Removes and returns the up to <code>count</code> last elements of the …","Pop a value from a list, push it to another list and …","Insert all the specified values at the tail of the list …","Inserts value at the tail of the list stored at key, only …","Add one or more members to a set.","Get the number of members in a set.","Subtract multiple sets.","Subtract multiple sets and store the resulting set in a …","Set the string value of a key.","Set the value and expiration of a key.","Sets multiple keys to their values.","Set the value of a key, only if the key does not exist","Sets or clears the bit at offset in the string value …","Overwrite the part of the value stored in key at the …","Intersect multiple sets.","Intersect multiple sets and store the resulting set in a …","Determine if a given value is a member of a set.","Get all the members in a set.","Move a member from one set to another.","Remove and return a random member from a set.","Get one random member from a set.","Get multiple random members from a set.","Remove one or more members from a set.","Get the length of the value stored in a key.","Add multiple sets.","Add multiple sets and store the resulting set in a key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the expiration time of a key.","","","","","","","","","","","Unlink one or more keys.","","","","","","","","","","","","","","Ack pending stream messages checked out by a consumer.","Add a stream message by <code>key</code>. Use <code>*</code> as the <code>id</code> for the …","BTreeMap variant for adding a stream message by <code>key</code>. Use <code>*</code> …","Add a stream message while capping the stream at a …","BTreeMap variant for adding a stream message while capping …","Claim pending, unacked messages, after some period of time,","This is the optional arguments version for claiming …","Deletes a list of <code>id</code>s for a given stream <code>key</code>.","This command is used for creating a consumer <code>group</code>. It …","This is the alternate version for creating a consumer <code>group</code>","This deletes a <code>consumer</code> from an existing consumer <code>group</code> …","Destroy an existing consumer <code>group</code> for a given stream <code>key</code>","Alter which <code>id</code> you want consumers to begin reading from an …","This returns all info details about which consumers have …","Returns all consumer <code>group</code>s created for a given stream <code>key</code>.","Returns info about high-level stream details (first &amp; last …","Returns the number of messages for a given stream <code>key</code>.","This is a basic version of making XPENDING command calls …","An alternate version of <code>xpending_count</code> which filters by …","This XPENDING version returns a list of all messages over …","Returns a range of messages in a given stream <code>key</code>.","A helper method for automatically returning all messages …","A method for paginating a stream by <code>key</code>.","Read a list of <code>id</code>s for each stream <code>key</code>. This is the basic …","This method handles setting optional arguments for <code>XREAD</code> …","This is the reverse version of <code>xrange</code>. The same rules …","This is the reverse version of <code>xrange_all</code>. The same rules …","This is the reverse version of <code>xrange_count</code>. The same …","Trim a stream <code>key</code> to a MAXLEN count.","Add one member to a sorted set, or update its score if it …","Add multiple members to a sorted set, or update its score …","Get the number of members in a sorted set.","Count the members in a sorted set with scores within the …","Increments the member in a sorted set at key by delta. If …","Intersect multiple sorted sets and store the resulting …","Intersect multiple sorted sets and store the resulting …","<code>Commands::zinterstore_max</code>, but with the ability to specify …","Intersect multiple sorted sets and store the resulting …","<code>Commands::zinterstore_min</code>, but with the ability to specify …","<code>Commands::zinterstore</code>, but with the ability to specify a …","Count the number of members in a sorted set between a …","Removes and returns up to count members with the highest …","Removes and returns up to count members with the lowest …","Removes and returns up to count members with the highest …","Removes and returns up to count members with the lowest …","Return up to count random members in a sorted set (or 1 if …","Return up to count random members in a sorted set with …","Return a range of members in a sorted set, by index","Return a range of members in a sorted set, by index with …","Return a range of members in a sorted set, by …","Return a range of members in a sorted set, by …","Return a range of members in a sorted set, by score.","Return a range of members in a sorted set, by score with …","Return a range of members in a sorted set, by score with …","Return a range of members in a sorted set, by score with …","Determine the index of a member in a sorted set.","Remove one or more members from a sorted set.","Remove all members in a sorted set between the given …","Remove all members in a sorted set within the given scores.","Remove all members in a sorted set within the given …","Return a range of members in a sorted set, by index, with …","Return a range of members in a sorted set, by index, with …","Return a range of members in a sorted set, by …","Return a range of members in a sorted set, by …","Return a range of members in a sorted set, by score.","Return a range of members in a sorted set, by score with …","Return a range of members in a sorted set, by score with …","Return a range of members in a sorted set, by score with …","Determine the index of a member in a sorted set, with …","Get the score associated with the given member in a sorted …","Get the scores associated with multiple members in a …","Unions multiple sorted sets and store the resulting sorted …","Unions multiple sorted sets and store the resulting sorted …","<code>Commands::zunionstore_max</code>, but with the ability to specify …","Unions multiple sorted sets and store the resulting sorted …","<code>Commands::zunionstore_min</code>, but with the ability to specify …","<code>Commands::zunionstore</code>, but with the ability to specify a …","A local redis server for executing tests against","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[13,0,19,26,28,0,0,13,0,13,13,0,13,0,0,0,0,0,0,19,26,28,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,8,1,9,1,13,13,1,1,1,1,1,1,1,1,1,19,26,6,28,18,8,23,1,9,13,19,26,6,28,18,8,23,1,9,13,1,1,18,0,23,23,26,6,28,18,1,9,13,6,28,18,1,9,13,0,23,19,18,1,1,1,1,23,28,18,23,28,18,23,13,28,18,13,1,1,1,1,23,28,18,23,23,9,13,19,26,6,28,18,8,23,23,23,23,23,23,23,1,9,13,57,6,6,57,13,57,1,1,1,1,1,1,1,26,1,1,28,18,9,1,18,1,1,1,19,28,18,1,1,1,1,1,1,1,1,1,1,1,1,1,19,26,6,28,18,8,23,1,9,13,8,9,6,6,23,23,23,23,26,23,19,1,8,9,1,23,1,1,1,1,1,1,8,13,1,1,1,1,1,1,1,1,1,1,1,9,18,1,1,1,1,18,18,18,1,1,1,1,1,1,18,9,23,1,1,1,6,1,6,18,23,0,1,1,26,26,26,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,6,23,6,6,28,18,1,9,13,23,19,26,6,28,18,8,23,1,9,13,19,26,6,28,18,8,23,1,9,13,1,19,26,6,28,18,8,23,1,9,13,1,18,19,26,6,28,18,8,23,1,9,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,69,69,69,69,69,69,69,69,69,69],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[[[3,[2]]],1],[[],1],[4,1],[2,1],[[],1],[[],1],[[],1],[4,1],[[],1],[[],1],[2,1],[[2,[3,[5]]],1],[[],1],[[],1],[[[7,[6]]]],[[2,2],1],[[8,2],8],[[1,2],1],[[9,2],8],[1,[[0,[10,11,12]]]],[13,[[15,[14]]]],[13,[[15,[[3,[13]]]]]],[[2,2],1],[[2,2],1],[[2,2],1],[[2,2],1],[2,1],[[2,16,16],1],[[2,2,17,17,16],1],[[16,16,2,17,16],1],[[2,16],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,16],1],[[2,2,16],1],[18,[[20,[19]]]],[[[22,[21]]],[[20,[1]]]],[23,24],[23,[[15,[25]]]],[26,27],[6,6],[28,28],[18,18],[1,1],[9,9],[13,13],[[]],[[]],[[]],[[]],[[]],[[]],[24,1],[23,[[15,[24]]]],[19,[[29,[26,23]]]],[18,[[20,[[30,[19]]]]]],[[1,31],1],[[2,2],1],[[],1],[2,1],[23,24],[32,[[29,[28]]]],[32,[[29,[18]]]],[23,[[15,[24]]]],[[28,28],27],[[18,18],27],[[23,23],27],[[13,13],27],[[],27],[[],27],[[],27],[[1,33]],[2,1],[[2,16],1],[[2,16],1],[23,[[15,[24]]]],[[28,34],35],[[18,34],35],[[23,34],[[29,[36]]]],[[23,34],[[29,[36]]]],[[9,34],[[29,[36]]]],[[13,34],[[29,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[37,23],[[]],[38,23],[39,23],[[],23],[40,23],[[]],[[]],[[]],[[[3,[41]]],[[15,[[22,[42]]]]]],[[43,44],[[29,[45]]]],[[46,44],[[29,[45]]]],[13,[[29,[23]]]],[13,[[29,[13,23]]]],[[[3,[13]]],[[29,[[22,[42]],23]]]],[[2,2],1],[[2,2,2,47],1],[[2,2],1],[[2,2],1],[[2,48,48,48,47,49],1],[[2,2,48,47,49],1],[2,1],[26,50],[2,1],[[2,51],1],[[[0,[52,53]],54],31],[[[0,[52,53]],54],31],[9,24],[1,[[22,[41,42]]]],[18,[[20,[[55,[19]]]]]],[[2,16],1],[[2,4,4],1],[[2,2],1],[[19,26],27],[[28,56]],[[18,56]],[[2,2],1],[[2,2],1],[[2,2],1],[2,1],[[2,2,2],1],[2,1],[2,1],[[2,2,2],1],[[2,3],1],[[2,2,2],1],[2,1],[1,27],[[2,2],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,33],[[29,[57,23]]]],[[9,33],[[29,[57,23]]]],[[6,8],[[20,[13]]]],[[6,8],[[20,[13]]]],[23,27],[23,27],[23,27],[23,27],[26,27],[23,27],[[19,26],[[29,[23]]]],[[1,33],[[29,[[58,[57]],23]]]],[[8,2],8],[[9,2],8],[2,1],[23,59],[[2,4],1],[[2,2,2],1],[[2,2,2],1],[2,1],[[2,2,17,17],1],[[16,2,17,16],1],[[8,33],[[29,[60,23]]]],[13,27],[[2,[15,[61]]],1],[[2,2,62],1],[[2,2],1],[[2,2],1],[[2,4,4],1],[[2,4,2],1],[[2,4,2],1],[[2,4,4],1],[2,1],[3,1],[[],1],[24,9],0,[2,1],[2,1],[2,1],[2,1],[18,[[20,[6]]]],[18,[[20,[6]]]],0,[2,1],[[2,16],1],[[2,16],1],[[2,2],1],[2,1],[[2,2],1],0,[9,8],[63],[[2,2,16],1],[2,1],[[2,2],1],[[6,1],[[20,[13]]]],[[1,33],[[29,[57,23]]]],[[6,1],[[20,[13]]]],0,[23,15],[44,20],[[2,2],1],[[2,2],1],[[26,1],[[29,[13,23]]]],[[26,[3,[41]]],[[29,[13,23]]]],[[26,[3,[41]],16,16],[[29,[[22,[13]],23]]]],[[2,[15,[61]]],1],[[2,2],1],[[2,2],1],[[2,2],1],[[2,2],1],[2,1],[2,1],[[2,2],1],[[2,2],1],[[2,2,16],1],[3,1],[[2,2],1],[[2,16,27],1],[[2,4,2],1],[2,1],[[2,2],1],[[2,2],1],[2,1],[[2,2,2],1],[2,1],[2,1],[[2,16],1],[[2,2],1],[2,1],[2,1],[[2,2],1],0,[44,[[29,[43,45]]]],[[],45],[44,[[29,[46,45]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],60],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[2,1],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[[],64],[2,1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,[3,[41]]]],[[1,65]],[[2,2,[3,[2]]],1],[[2,2,3],1],[[2,2,2],1],[[2,66,2,3],1],[[2,66,2,2],1],[[2,2,2,2,[3,[2]]],1],[[2,2,2,2,[3,[2]],67],1],[[2,[3,[2]]],1],[[2,2,2],1],[[2,2,2],1],[[2,2,2],1],[[2,2],1],[[2,2,2],1],[[2,2],1],[2,1],[2,1],[2,1],[[2,2],1],[[2,2,2,2,2,2],1],[[2,2,2,2,2],1],[[2,2,2],1],[2,1],[[2,2,2,2],1],[[[3,[2]],[3,[2]]],1],[[[3,[2]],[3,[2]],68],1],[[2,2,2],1],[2,1],[[2,2,2,2],1],[[2,66],1],[[2,2,2],1],[[2,3],1],[2,1],[[2,2,2],1],[[2,2,2],1],[[2,[3,[2]]],1],[[2,[3,[2]]],1],[[2,3],1],[[2,[3,[2]]],1],[[2,3],1],[[2,3],1],[[2,2,2],1],[[[3,[2]],4],1],[[[3,[2]],4],1],[[2,4],1],[[2,4],1],[[2,[15,[4]]],1],[[2,4],1],[[2,4,4],1],[[2,4,4],1],[[2,2,2],1],[[2,2,2,4,4],1],[[2,2,2],1],[[2,2,2,4,4],1],[[2,2,2,4,4],1],[[2,2,2],1],[[2,2],1],[[2,2],1],[[2,2,2],1],[[2,2,2],1],[[2,4,4],1],[[2,4,4],1],[[2,4,4],1],[[2,2,2],1],[[2,2,2,4,4],1],[[2,2,2],1],[[2,2,2,4,4],1],[[2,2,2,4,4],1],[[2,2,2],1],[[2,2],1],[[2,2],1],[[2,[3,[2]]],1],[[2,[3,[2]]],1],[[2,[3,[2]]],1],[[2,3],1],[[2,[3,[2]]],1],[[2,3],1],[[2,3],1],0,[[]],[[]],[69,[[20,[6]]]],[[]],[[]],[[],[[20,[69]]]],[[],29],[[],29],[[],64],[[]]],"c":[118],"p":[[3,"Cmd"],[8,"ToRedisArgs"],[15,"slice"],[15,"isize"],[4,"Rule"],[3,"RedisConnection"],[8,"UserDataMethods"],[3,"ScriptInvocation"],[3,"Script"],[8,"Iterator"],[8,"Clone"],[8,"ExactSizeIterator"],[4,"RedisValue"],[3,"MapIter"],[4,"Option"],[15,"usize"],[4,"Direction"],[3,"RedisConnKey"],[4,"ClientWrapper"],[6,"Result"],[4,"Value"],[3,"Vec"],[3,"RedisError"],[15,"str"],[8,"Error"],[4,"ConnectionWrapper"],[15,"bool"],[4,"NodeSpec"],[4,"Result"],[3,"PooledConnection"],[15,"u64"],[8,"Deserializer"],[8,"ConnectionLike"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Utf8Error"],[3,"NulError"],[3,"FromUtf8Error"],[3,"Error"],[15,"u8"],[3,"Global"],[4,"Value"],[3,"Lua"],[4,"Error"],[3,"MultiValue"],[4,"Unit"],[15,"f64"],[3,"RadiusOptions"],[15,"i64"],[4,"Expiry"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[3,"Pool"],[8,"Hasher"],[8,"FromRedisValue"],[3,"Iter"],[4,"ErrorKind"],[3,"String"],[3,"NonZeroUsize"],[3,"LposOptions"],[3,"Demand"],[3,"TypeId"],[8,"Display"],[4,"StreamMaxlen"],[3,"StreamClaimOptions"],[3,"StreamReadOptions"],[3,"RedisServer"]]},\
"mod_sqlite":{"doc":"","t":"F","n":["register"],"q":[[0,"mod_sqlite"]],"d":[""],"i":[0],"f":[[1,2]],"c":[],"p":[[3,"Lua"],[6,"Result"]]},\
"mta_sts":{"doc":"","t":"AFAIDLLMLLMLKFLLLLNIDNENLLLLLLLLMLLLLKLLFMMMLLLLLLLLLL","n":["dns","get_policy_for_domain","policy","Lookup","MtaStsDnsRecord","borrow","borrow_mut","fields","fmt","from","id","into","lookup_txt","resolve_dns_record","try_from","try_into","type_id","vzip","Enforce","Get","MtaStsPolicy","None","PolicyMode","Testing","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","equivalent","equivalent","fields","fmt","fmt","from","from","http_get","into","into","load_policy_for_domain","max_age","mode","mx","mx_name_matches","parse","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"mta_sts"],[3,"mta_sts::dns"],[18,"mta_sts::policy"]],"d":["","","","A trait for entities that perform DNS resolution.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if <code>name</code> matches any of the allowed mx host …","","","","","","","","",""],"i":[0,0,0,0,0,5,5,5,5,5,5,5,11,0,5,5,5,5,14,0,0,14,0,14,14,2,14,2,14,14,14,14,2,14,2,14,2,16,14,2,0,2,2,2,2,2,14,2,14,2,14,2,14,2],"f":[0,[1,[[4,[[3,[2]]]]]],0,0,0,[[]],[[]],0,[[5,6],7],[[]],0,[[]],[1,[[10,[[4,[[9,[8]]]]]]]],[[1,11],[[4,[5]]]],[[],12],[[],12],[[],13],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[14,14],15],[[],15],[[],15],[[],15],0,[[14,6],7],[[2,6],7],[[]],[[]],[1,[[10,[[4,[8]]]]]],[[]],[[]],[[1,16],[[4,[2]]]],0,0,0,[[2,1],15],[1,[[4,[2]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]]],"c":[],"p":[[15,"str"],[3,"MtaStsPolicy"],[3,"Arc"],[6,"Result"],[3,"MtaStsDnsRecord"],[3,"Formatter"],[6,"Result"],[3,"String"],[3,"Vec"],[6,"BoxFuture"],[8,"Lookup"],[4,"Result"],[3,"TypeId"],[4,"PolicyMode"],[15,"bool"],[8,"Get"]]},\
"regex_set_map":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLL","n":["RegexSetMap","RegexSetMapBuilder","add_methods","add_rule","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone_into","deserialize","deserialize","erased_serialize","erased_serialize","from","from","from","from_lua","from_lua_multi","into","into","lookup","new","register","serialize","serialize","to_lua","to_lua_multi","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"regex_set_map"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,2,5,2,5,2,5,5,2,2,2,5,2,5,2,5,5,2,2,2,5,2,5,0,2,5,2,2,2,2,2,5,2,5,2,5],"f":[0,0,[[[3,[[2,[1]]]]]],[[[5,[4]],[7,[6]],4]],[[]],[[]],[[]],[[]],[[[5,[4]]],[[8,[[2,[4]],6]]]],[[[2,[[0,[4,4]]]]],[[2,[[0,[4,4]]]]]],[[]],[9,[[8,[[2,[[0,[10,4]]]]]]]],[9,[[8,[[5,[[0,[10,4]]]]]]]],[11,[[8,[12,13]]]],[11,[[8,[12,13]]]],[[]],[[]],[[[2,[4]]],[[5,[4]]]],[[14,15],[[8,[16]]]],[[17,15],[[8,[16]]]],[[]],[[]],[[[2,[4]],18],[[19,[4]]]],[[],[[5,[4]]]],[15,20],[[[2,[[0,[21,4]]]],22],8],[[[5,[[0,[21,4]]]],22],8],[15,[[8,[14,16]]]],[15,[[8,[17,16]]]],[[]],[[],8],[[[5,[4]]],[[8,[[2,[4]],6]]]],[[],8],[[],8],[[],8],[[],23],[[],23]],"c":[],"p":[[4,"CacheValue"],[3,"RegexSetMap"],[8,"UserDataMethods"],[8,"Clone"],[3,"RegexSetMapBuilder"],[3,"String"],[8,"Into"],[4,"Result"],[8,"Deserializer"],[8,"Deserialize"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[4,"Value"],[3,"Lua"],[4,"Error"],[3,"MultiValue"],[15,"str"],[4,"Option"],[6,"Result"],[8,"Serialize"],[8,"Serializer"],[3,"TypeId"]]},\
"rfc5321":{"doc":"","t":"AAAAEDNNNNNNNNNDNNNNNDDENMLLLLLLLLLLLLLFFMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLMLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDDDMLLLLLLMLLLLLLMMMMMMLLLLMMMLLLLLLLLLLLLMLLLLLMMMLLLLMMLLLLLLLLLLLLLLLLLNENNENNDNENNNDDNNNNNNNNENENNNNNNNLNNMNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNMNNNLLLLLLLLLLLLLLLLLNNNNLLLLLLLLNLLLLLLLLNLNNNNNLLLLLLLLNNNFNNMNNMNNMNNLLNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNLLLLLLLLNNMMMMMMMMIG","n":["client","client_types","parser","traits","ClientError","EsmtpCapability","FailedHandshake","Info","InvalidDnsName","Io","MalformedResponseLine","NoUsableDaneTlsa","NotConnected","Rejected","ResponseTooLong","SmtpClient","SslError","SslErrorStack","TimeOutData","TimeOutRequest","TimeOutResponse","TlsInformation","TlsOptions","TlsStatus","Utf8","alt_name","auth_plain","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_dane_connector","build_tls_connector","cipher","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dane_tlsa","default","default","deserialize","deserialize","ehlo","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","insecure","into","into","into","into","into","into","name","new","param","pipeline_commands","protocol_version","provide","read_response","send_command","send_mail","serialize","serialize","source","starttls","subject_name","timeouts","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","with_stream","command","command","duration","duration","hostname","tlsa","EnhancedStatusCode","Response","SmtpClientTimeouts","auth_timeout","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone","clone_into","clone_into","clone_into","code","command","connect_timeout","content","data_dot_timeout","data_timeout","default","deserialize","deserialize","deserialize","detail","ehlo_timeout","enhanced_code","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","idle_timeout","into","into","into","is_permanent","is_transient","mail_from_timeout","rcpt_to_timeout","rset_timeout","serialize","serialize","serialize","short_timeouts","starttls_timeout","subject","to_owned","to_owned","to_owned","to_single_line","total_message_send_duration","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Auth","Command","Data","DataDot","Domain","EOI","Ehlo","EsmtpParameter","Expn","ForwardPath","Helo","Help","MailFrom","MailPath","Mailbox","Name","Noop","NullSender","Path","Path","Postmaster","Quit","RcptTo","ReversePath","Rset","Rule","StartTls","Tagged","V4","V6","Vrfy","address_literal","adl","all_rules","alpha","at_domain","at_domain_list","atext","atom","auth","base64","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client_timeout","client_timeout_request","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","command","complete_domain","data","dcontent","digit","domain","domain","dot_string","ehlo","encode","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","esmtp_keyword","esmtp_param","esmtp_value","expn","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_path","from","from","from","from","from","from","from","from","general_address_literal","hash","helo","help","hexchar","hexdig","initial_response","into","into","into","into","into","into","into","into","ipv4_address_literal","ipv6_address","ipv6_address_literal","is_valid_domain","ldh_str","let_dig","local_part","local_part","mail","mailbox","mailbox","mech_char","name","noop","null_sender","parse","partial_cmp","path","path_no_angles","postmaster","q_content_smtp","q_text_smtp","quit","quoted_pair_smtp","quoted_string","rcpt","reverse_path","rset","sasl_mech","smtp_parameters","snum","standardized_tag","starttls","string","sub_domain","tag_content","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vrfy","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","xchar","xtext","address","address","initial_response","parameters","parameters","sasl_mech","literal","tag","AsyncReadAndWrite","BoxedAsyncReadAndWrite"],"q":[[0,"rfc5321"],[4,"rfc5321::client"],[131,"rfc5321::client::ClientError"],[137,"rfc5321::client_types"],[211,"rfc5321::parser"],[437,"rfc5321::parser::Command"],[443,"rfc5321::parser::Domain"],[445,"rfc5321::traits"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Issue a series of commands, and return the responses to …","","","","","","","","","Attempt TLS handshake. Returns Err for IO errors. On …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Compute theoretical maximum lifetime of a single message …","","","","","","","","","","","","","","","","","","End-of-input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Timeouts for reading the response","Timeouts for writing the request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,11,11,4,4,4,4,4,4,4,0,4,4,4,4,4,0,0,0,4,6,1,4,6,10,1,11,12,4,6,10,1,11,12,0,0,12,6,10,11,12,6,10,11,12,6,6,12,11,12,1,10,11,12,10,11,12,4,4,6,10,1,11,12,4,4,4,4,4,6,10,1,11,12,6,4,6,10,1,11,12,10,1,10,1,12,4,1,1,1,11,12,4,1,12,1,6,10,11,12,4,4,6,10,1,11,12,4,6,10,1,11,12,4,6,10,1,11,12,4,6,10,1,11,12,1,50,51,50,51,52,52,0,0,0,25,25,29,42,25,29,42,42,25,29,42,25,29,42,29,29,25,29,25,25,25,25,29,42,42,25,29,29,42,29,42,25,29,42,25,29,42,29,42,25,25,29,42,29,29,25,25,25,25,29,42,25,25,42,25,29,42,29,25,25,29,42,25,29,42,25,29,42,25,29,42,27,0,27,27,0,44,27,0,27,0,27,27,27,0,0,47,27,32,32,34,34,27,27,0,27,0,27,47,47,47,27,44,44,44,44,44,45,44,44,44,44,44,32,34,45,46,47,48,27,44,32,34,45,46,47,48,27,27,27,44,32,34,45,46,47,48,27,44,32,34,45,46,47,48,27,44,44,44,44,44,44,46,44,44,44,27,44,32,34,45,46,47,48,27,44,32,34,45,46,47,48,27,44,44,44,44,44,32,34,45,46,47,48,27,44,44,32,34,45,46,47,48,27,44,44,44,44,44,44,44,44,32,34,45,46,47,48,27,44,44,44,0,44,44,46,44,44,45,44,44,48,44,44,27,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,32,34,45,46,47,48,27,32,34,45,46,47,48,44,32,32,34,34,45,46,47,48,27,44,32,34,45,46,47,48,27,44,32,34,45,46,47,48,27,48,44,44,32,34,45,46,47,48,27,44,44,53,54,55,53,54,55,56,56,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,[3,[2]]],[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,2],[[5,[7,4]]]],[8,9],0,[6,6],[10,10],[11,11],[12,12],[[]],[[]],[[]],[[]],0,[[],6],[[],12],[13,[[5,[11]]]],[13,[[5,[12]]]],[[1,2],[[5,[[15,[14,10]],4]]]],[[10,10],8],[[11,11],8],[[12,12],8],[[],8],[[],8],[[],8],[[4,16],17],[[4,16],17],[[6,16],17],[[10,16],17],[[1,16],17],[[11,16],17],[[12,16],17],[18,4],[[]],[19,4],[20,4],[21,4],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[[0,[22,23,24]],25],[[26,[1]]]],0,[[1,[28,[27]]],[[28,[[5,[29,4]]]]]],0,[30],[[1,[3,[27]],31],[[5,[29,4]]]],[[1,27],[[5,[29,4]]]],[[1,[33,[32]],[33,[34]],[37,[[36,[35]]]]],[[5,[29,4]]]],[[11,38],5],[[12,38],5],[4,[[3,[39]]]],[[1,6],[[5,[11,4]]]],0,[1,25],[[]],[[]],[[]],[[]],[[],14],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[]],[[]],[[]],[[]],[[]],[[]],[[41,[37,[2]],25],1],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[25,25],[29,29],[42,42],[[]],[[]],[[]],0,0,0,0,0,0,[[],25],[13,[[5,[25]]]],[13,[[5,[29]]]],[13,[[5,[42]]]],0,0,0,[[29,29],8],[[42,42],8],[[],8],[[],8],[[25,16],17],[[29,16],17],[[42,16],17],[[]],[[]],[[]],[[29,43]],[[42,43]],0,[[]],[[]],[[]],[29,8],[29,8],0,0,0,[[25,38],5],[[29,38],5],[[42,38],5],[[],25],0,0,[[]],[[]],[[]],[29,14],[25,31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],40],[[],40],[[],40],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[36,[44]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,25],31],[[27,25],31],[44,44],[32,32],[34,34],[45,45],[46,46],[47,47],[48,48],[27,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[44,44],49],0,0,0,0,0,0,0,0,0,[27,14],[[44,44],8],[[32,32],8],[[34,34],8],[[45,45],8],[[46,46],8],[[47,47],8],[[48,48],8],[[27,27],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,[[44,16],17],[[32,16],17],[[34,16],17],[[45,16],17],[[46,16],17],[[47,16],17],[[48,16],17],[[27,16],17],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[44,43]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[2,8],0,0,0,0,0,0,0,0,0,0,0,[2,[[5,[27,14]]]],[[44,44],[[3,[49]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,14],[34,14],[45,14],[46,14],[47,14],[48,14],[[],5],[[],5],[2,[[5,[32]]]],[[],5],[2,[[5,[34]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"SmtpClient"],[15,"str"],[4,"Option"],[4,"ClientError"],[4,"Result"],[3,"TlsOptions"],[3,"ConnectConfiguration"],[15,"bool"],[3,"TlsConnector"],[3,"EsmtpCapability"],[4,"TlsStatus"],[3,"TlsInformation"],[8,"Deserializer"],[3,"String"],[3,"HashMap"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Error"],[3,"FromUtf8Error"],[3,"ErrorStack"],[8,"ToSocketAddrs"],[8,"ToString"],[8,"Clone"],[3,"SmtpClientTimeouts"],[6,"Result"],[4,"Command"],[3,"Vec"],[3,"Response"],[3,"Demand"],[3,"Duration"],[4,"ReversePath"],[8,"Into"],[4,"ForwardPath"],[15,"u8"],[15,"slice"],[8,"AsRef"],[8,"Serializer"],[8,"Error"],[3,"TypeId"],[8,"AsyncReadAndWrite"],[3,"EnhancedStatusCode"],[8,"Hasher"],[4,"Rule"],[3,"MailPath"],[3,"Mailbox"],[4,"Domain"],[3,"EsmtpParameter"],[4,"Ordering"],[13,"TimeOutResponse"],[13,"TimeOutRequest"],[13,"NoUsableDaneTlsa"],[13,"MailFrom"],[13,"RcptTo"],[13,"Auth"],[13,"Tagged"]]},\
"spool":{"doc":"","t":"NNIECLLKLLLKLFFLLKAKAFFAKLLLLMMMMDLLLLLLLLLLLLLFLLLLLNENNNNNENNNDDNNNNLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLMMMMLMMMMLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Corrupt","Item","Spool","SpoolEntry","SpoolId","borrow","borrow_mut","cleanup","deref","deref_mut","drop","enumerate","from","get_data_spool","get_meta_spool","init","into","load","local_disk","remove","rocks","set_data_spool","set_meta_spool","spool_id","store","try_from","try_into","type_id","vzip","data","error","id","id","LocalDiskSpool","borrow","borrow_mut","cleanup","deref","deref_mut","drop","enumerate","from","init","into","load","new","remove","set_sticky_bit","store","try_from","try_into","type_id","vzip","Bz2","DBCompressionTypeDef","Debug","Error","Fatal","Header","Info","LogLevelDef","Lz4","Lz4hc","None","RocksSpool","RocksSpoolParams","Snappy","Warn","Zlib","Zstd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","compaction_readahead_size","compression_type","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","enumerate","fmt","fmt","fmt","from","from","from","from","increase_parallelism","init","init","init","init","into","into","into","into","into","into","level_compaction_dynamic_level_bytes","load","log_file_time_to_roll","log_level","max_open_files","memtable_huge_page_size","new","obsolete_files_period","optimize_level_style_compaction","optimize_universal_style_compaction","paranoid_checks","remove","serialize","serialize","serialize","store","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","SpoolId","age","as_bytes","borrow","borrow_mut","clone","clone_into","compute_path","created","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_ascii_bytes","from_path","from_slice","from_str","hash","init","into","new","schema","serialize","to_owned","to_string","try_from","try_from","try_into","type_id","vzip"],"q":[[0,"spool"],[29,"spool::SpoolEntry"],[33,"spool::local_disk"],[53,"spool::rocks"],[150,"spool::spool_id"]],"d":["","","","","","","","Perform some periodic cleanup/maintenance","","","","Scan the contents of the spool, and emit a SpoolEntry for …","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Load the data corresponding to the provided Id","","Remove the data associated with the provided Id","","","","","Write/Replace the data associated with the provided Id","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Set the sticky bit on path. This prevents tmpwatch from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If non-zero, we perform bigger reads when doing …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","","","","See: …","","","","","","","","","","","","","","","","","","","","","","","","","","","Identifies a message within the spool of its host node.","Returns time elapsed since the id was created, given the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[5,5,0,0,0,5,5,8,5,5,5,8,5,0,0,5,5,8,0,8,0,0,0,0,8,5,5,5,5,38,39,38,39,0,16,16,16,16,16,16,16,16,16,16,16,16,16,0,16,16,16,16,16,20,0,21,21,21,21,21,0,20,20,20,0,0,20,21,20,20,18,19,20,21,18,19,20,21,18,19,19,19,20,21,18,19,20,21,18,19,20,21,19,20,21,18,19,20,21,18,19,20,21,18,19,20,21,19,18,19,20,21,18,19,20,20,21,21,19,18,19,19,19,19,18,19,19,19,19,18,19,20,21,18,18,19,20,21,18,19,20,21,18,19,20,21,18,19,20,21,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[0,0,0,0,0,[[]],[[]],[[],[[3,[[2,[1]]]]]],[4],[4],[4],[[[6,[5]]],7],[[]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],4],[[]],[10,[[3,[[2,[1]]]]]],0,[10,[[3,[[2,[1]]]]]],0,[[[9,[8]]]],[[[9,[8]]]],0,[[10,[12,[11]],13],[[3,[[2,[1]]]]]],[[],14],[[],14],[[],15],[[]],0,0,0,0,0,[[]],[[]],[16,[[3,[[2,[1]]]]]],[4],[4],[4],[[16,[6,[5]]],7],[[]],[[],4],[[]],[[16,10],[[3,[[2,[1]]]]]],[[17,13],[[7,[16]]]],[[16,10],[[3,[[2,[1]]]]]],[17],[[16,10,[12,[11]],13],[[3,[[2,[1]]]]]],[[],14],[[],14],[[],15],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[3,[[2,[1]]]]]],0,0,[[],19],[[],20],[[],21],[4],[4],[4],[4],[4],[4],[4],[4],[22,[[14,[19]]]],[22,[[14,[20]]]],[22,[[14,[21]]]],[4],[4],[4],[4],[[18,[6,[5]]],7],[[19,23],24],[[20,23],24],[[21,23],24],[[]],[[]],[[]],[[]],0,[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[20,25],[[]],[21,26],0,[[18,10],[[3,[[2,[1]]]]]],0,0,0,0,[[17,13,[27,[19]]],[[7,[18]]]],0,0,0,0,[[18,10],[[3,[[2,[1]]]]]],[[19,28],14],[[20,28],14],[[21,28],14],[[18,10,[12,[11]],13],[[3,[[2,[1]]]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],0,[[10,[30,[29]]],31],[10,[[32,[11]]]],[[]],[[]],[10,10],[[]],[[10,17],33],[10,[[30,[29]]]],[4],[4],[22,[[14,[10]]]],[4],[[10,10],13],[[],13],[[],13],[[],13],[[10,23],24],[[10,23],24],[[]],[34,10],[[[12,[11]]],[[27,[10]]]],[17,[[27,[10]]]],[[[12,[11]]],[[27,[10]]]],[35,[[27,[10]]]],[[10,36]],[[],4],[[]],[[],10],[[]],[[10,28],14],[[]],[[],37],[[],14],[37,[[14,[10]]]],[[],14],[[],15],[[]]],"c":[],"p":[[8,"Future"],[3,"Box"],[3,"Pin"],[15,"usize"],[4,"SpoolEntry"],[3,"Sender"],[6,"Result"],[8,"Spool"],[3,"Arc"],[3,"SpoolId"],[15,"u8"],[15,"slice"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"LocalDiskSpool"],[3,"Path"],[3,"RocksSpool"],[3,"RocksSpoolParams"],[4,"DBCompressionTypeDef"],[4,"LogLevelDef"],[8,"Deserializer"],[3,"Formatter"],[6,"Result"],[4,"DBCompressionType"],[4,"LogLevel"],[4,"Option"],[8,"Serializer"],[3,"Utc"],[3,"DateTime"],[3,"Duration"],[15,"array"],[3,"PathBuf"],[3,"Uuid"],[15,"str"],[8,"Hasher"],[3,"String"],[13,"Item"],[13,"Corrupt"]]},\
"throttle":{"doc":"This crate implements a throttling API based on a generic …","t":"NENNNDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMMMMLMMMLLFLMLLLLLLLLLLLLLLFLLLDDLLLLLLLLMLLLLLLMLLLLLLLLLL","n":["AnyHow","Error","Generic","NonExistentLease","Redis","ThrottleResult","ThrottleSpec","TooManyLeases","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","eq","equivalent","equivalent","erased_serialize","fmt","fmt","fmt","fmt","from","from","from","from","from","get_hash","hash","into","into","into","limit","limit","limit","max_burst","period","provide","remaining","reset_after","retry_after","serialize","source","throttle","throttle","throttled","to_lua_err","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","use_redis","vzip","vzip","vzip","LimitLease","LimitSpec","acquire_lease","acquire_lease_memory","acquire_lease_redis","borrow","borrow","borrow_mut","borrow_mut","drop","duration","extend","fmt","from","from","into","into","limit","release","take","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"throttle"],[68,"throttle::limit"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The total limit of the key (max_burst + 1). This is …","","Period, in seconds","","The remaining limit of the key. Equivalent to …","The number of seconds until the limit will reset to its …","The number of seconds until the user should retry, but …","","","It is very important for <code>key</code> to be used with the same <code>limit</code>…","","true if the action was limited","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum lease duration for a single count","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum amount","","","","","","","","","",""],"i":[9,0,9,9,9,0,0,9,9,1,5,9,1,5,1,1,1,1,5,1,5,1,9,9,1,5,9,9,9,1,5,1,1,9,1,5,0,1,5,1,1,9,5,5,5,1,9,0,1,5,9,1,9,9,1,1,1,5,9,1,5,9,1,5,0,9,1,5,0,0,30,30,30,30,31,30,31,31,30,31,31,30,31,30,31,30,31,31,30,31,30,31,30,31,30,31],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[2,[[3,[1]]]],[[1,1],4],[[5,5],4],[[],4],[[],4],[6,[[3,[7,8]]]],[[9,10],11],[[9,10],11],[[1,10],11],[[5,10],11],[12,9],[[]],[13,9],[[]],[[]],[[[0,[14,15]],16],17],[[1,18]],[[]],[[]],[[]],0,0,0,0,0,[19],0,0,0,[[1,20],3],[9,[[22,[21]]]],[[23,17,24,17,[22,[17]]],[[3,[5,9]]]],[[1,[25,[23]]],[[3,[5,9]]]],0,[[],26],[[]],[[],27],[[],3],[23,[[3,[1,27]]]],[27,[[3,[1,27]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],28],[[],28],[[],28],[29,[[3,[9]]]],[[]],[[]],[[]],0,0,[[30,[25,[23]]],[[3,[31,9]]]],[[30,23],[[3,[31,9]]]],[[30,29,23],[[3,[31,9]]]],[[]],[[]],[[]],[[]],[31],0,[[31,24],[[3,[9]]]],[[31,10],11],[[]],[[]],[[]],[[]],0,[31],[31,31],[[],3],[[],3],[[],3],[[],3],[[],28],[[],28],[[]],[[]]],"c":[],"p":[[3,"ThrottleSpec"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"ThrottleResult"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"RedisError"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[3,"Demand"],[8,"Serializer"],[8,"Error"],[4,"Option"],[15,"str"],[3,"Duration"],[8,"AsRef"],[4,"Error"],[3,"String"],[3,"TypeId"],[3,"RedisConnection"],[3,"LimitSpec"],[3,"LimitLease"]]},\
"timeq":{"doc":"","t":"INNQNNEDNDIELLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CancellableTimerEntry","Empty","Expired","Id","Items","NotFound","PopResult","QuadWheelWithOverflow","Sleep","TimeQ","TimerEntryWithDelay","TimerError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_skip","cancel","cancel_by_id","delay","drain","fmt","from","from","from","from","id","insert","insert","insert_ref","insert_ref_with_delay","into","into","into","into","is_empty","len","new","new","pop","skip","tick","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"timeq"]],"d":["A trait for timer entries that can be uniquely identified, …","The queue is empty","The timout has already expired","The type of the unique id of the outstanding timeout","These items are ready for immediate action","The timeout with the given id was not found","","An implementation of four-level byte-sized wheel","No items will be ready for the specified duration","A TimeQ is a queue datastructure where the contained items …","A trait for timer entries that store their delay along the …","Errors encounted by a timer implementation","","","","","","","","","Determine if and how many ticks can be skipped","Cancel the timeout with the given <code>id</code>","Cancel an item given its id","Returns the time until the timeout is supposed to be …","Drains the entire contents of the queue, returning all of …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the unique id of the outstanding timeout","Insert a new timeout into the wheel","Insert a new entry","Insert a new timeout into the wheel","Insert a new timeout into the wheel to be returned after …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the wheel is empty","","Create a new wheel","","Returns the set of items that need immediate action","Skip a certain <code>amount</code> of units (ms)","Move the wheel forward by a single unit (ms)","","","","","","","","","","","",""],"i":[0,17,5,1,17,5,0,0,17,0,0,0,2,8,17,5,2,8,17,5,2,2,8,7,8,5,2,8,17,5,1,2,8,2,2,2,8,17,5,8,8,2,8,8,2,2,2,8,17,5,2,8,17,5,2,8,17,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],[[6,[[5,[4]]]]]],[[[8,[[0,[1,7]]]]],[[6,[[5,[4]]]]]],[[],9],[[[8,[[0,[1,7]]]]],[[11,[[10,[[0,[1,7]]]]]]]],[[[5,[12]],13],[[6,[14]]]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[7,1]]]],[0,[7,1]]],[[6,[[5,[[0,[7,1]]]]]]]],[[[8,[[0,[1,7]]]],[10,[[0,[1,7]]]]],[[6,[[5,[[10,[[0,[1,7]]]]]]]]]],[[[2,[[0,[7,1]]]],[10,[[0,[7,1]]]]],[[6,[[5,[[10,[[0,[7,1]]]]]]]]]],[[[2,[1]],[10,[1]],9],[[6,[[5,[[10,[1]]]]]]]],[[]],[[]],[[]],[[]],[[[8,[[0,[1,7]]]]],15],[[[8,[[0,[1,7]]]]],16],[[],[[2,[1]]]],[[],[[8,[[0,[1,7]]]]]],[[[8,[[0,[1,7]]]]],[[17,[[0,[1,7]]]]]],[[[2,[1]],18]],[[[2,[1]]],[[11,[[10,[1]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],19],[[],19],[[],19],[[],19]],"c":[],"p":[[8,"CancellableTimerEntry"],[3,"QuadWheelWithOverflow"],[4,"Skip"],[4,"Infallible"],[4,"TimerError"],[4,"Result"],[8,"TimerEntryWithDelay"],[3,"TimeQ"],[3,"Duration"],[3,"Arc"],[3,"Vec"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[15,"bool"],[15,"usize"],[4,"PopResult"],[15,"u32"],[3,"TypeId"]]},\
"version_info":{"doc":"","t":"FF","n":["kumo_target_triple","kumo_version"],"q":[[0,"version_info"]],"d":["",""],"i":[0,0],"f":[[[],1],[[],1]],"c":[],"p":[[15,"str"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
